library(sf)
library(dplyr)
library(readr)
library(rnaturalearth)
library(ggplot2)
dat <- read_csv("WSO_2023.csv")
View(dat)
# 2. Bounding Box defining (bigger area around Switzerland)
lon_min <- 5.5
lon_max <- 10.7
lat_min <- 45.5
lat_max <- 48.3
# 3. Daten im Bounding Box filtern
Swiss_region_points <-  dat %>%
filter(Longitude >= lon_min, Longitude <= lon_max,
Latitude  >= lat_min,  Latitude  <= lat_max)
# 4. Als CSV speichern
write_csv(Swiss_region_points, "Swiss_region_points.csv")
##########Plot
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)
countries <- ne_countries(scale = "medium", returnclass = "sf")
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
countries <- ne_countries(scale = "medium", returnclass = "sf")
##########Plot
library(rnaturalearth)
library(rnaturalearthdata)
countries <- ne_countries(scale = "medium", returnclass = "sf")
# List of defined states in Europe
eu_countries <- ("Switzerland")
View(countries)
source("~/GitHub/Modeling_yield/Teaching.R")
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
countries %>%
filter(admin %in% eu_countries)
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
ggplot() +
geom_sf(data = europe_selected, fill = NA, color = "black", size = 0.5) +  # borders of countries
geom_point(data = Swiss_region_points, aes(x = Longitude, y = Latitude, color = Final_WSO_kg_ha), size = 2) +
scale_color_gradient(low = "chocolate", high = "darkgreen") +
labs(title = "Biomass 2023",
x = "Longitude",
y = "Latitude",
color = "WSO [kg/ha]") +
coord_sf(xlim = c(5.5, 10.7), ylim = c(45.5, 48.7), expand = FALSE) +
theme_minimal()
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
ggplot() +
geom_sf(data = europe_selected, fill = NA, color = "black", size = 0.5) +  # borders of countries
geom_point(data = Swiss_region_points, aes(x = Longitude, y = Latitude, color = Final_WSO_kg_ha), size = 2) +
scale_color_gradient(low = "chocolate", high = "darkgreen") +
labs(title = "Biomass 2023",
x = "Longitude",
y = "Latitude",
color = "WSO [kg/ha]") +
coord_sf(xlim = c(5.5, 10.7), ylim = c(45.5, 48.7), expand = FALSE) +
theme_minimal()
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
# Convert europe selected to a dataframe so it can be plotted:
# Your code here
europe_selected <- as.data.frame(europe_selected)
View(europe_selected)
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
# Check the class of europe_selected
class(europe_selected)
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
# Check the class of europe_selected
class(europe_selected)
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
# Check the class of europe_selected
class(europe_selected)
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
countries %>%
filter(admin %in% eu_countries)
View(europe_selected)
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
# Check the class of europe_selected
class(europe_selected)
?class
a <- c(32,4)
class(a)
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
countries %>%
filter(admin %in% eu_countries)
# Check the class of europe_selected
print(class(europe_selected))
ggplot() +
geom_sf(data = europe_selected, fill = NA, color = "black", size = 0.5) +  # borders of countries
geom_point(data = Swiss_region_points, aes(x = Longitude, y = Latitude, color = Final_WSO_kg_ha), size = 2) +
scale_color_gradient(low = "chocolate", high = "darkgreen") +
labs(title = "Biomass 2023",
x = "Longitude",
y = "Latitude",
color = "WSO [kg/ha]") +
coord_sf(xlim = c(5.5, 10.7), ylim = c(45.5, 48.7), expand = FALSE) +
theme_minimal()
# Create a map for each coordinates showing the final WSO
str(yield_data)
