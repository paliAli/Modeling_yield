# Convert output to a data frame
out_df <- as.data.frame(out)
# Save the output
write.csv(out_df, paste0("Output/biomass_production_", Unique_ID[i], "_", sowing_year, ".csv"), row.names = FALSE)
}
}
# Import the csvs as data frames
biomass_files <- list.files(path = "Output", pattern = "biomass_production_", full.names = TRUE)
biomass_data <- lapply(biomass_files, read.csv)
test <- biomass_data[[5]]
# Plot the results ----
ggplot(test, aes(x = time)) +
geom_line(aes(y = WLV, color = "Leaf weight"), linewidth = 1.2) +
geom_line(aes(y = WST, color = "Stem weight"), linewidth = 1.2) +
geom_line(aes(y = WRT, color = "Root weight"), linewidth = 1.2) +
geom_line(aes(y = WSO, color = "Storage weight"), linewidth = 1.2) +
labs(title = "Biomass Production Over Time",
x = "Time",
y = "Weight (kg/ha)") +
scale_color_manual(values = c("Leaf weight" = "green",
"Stem weight" = "brown",
"Root weight" = "blue",
"Storage weight" = "orange")) +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
# Only plot LAI
ggplot(test, aes(x = time, y = LAI)) +
geom_line(color = "purple", linewidth = 1.2) +
labs(title = "Leaf Area Index (LAI) Over Time",
x = "Time",
y = "LAI") +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
View(test)
test <- biomass_data[[3]]
# Plot the results ----
ggplot(test, aes(x = time)) +
geom_line(aes(y = WLV, color = "Leaf weight"), linewidth = 1.2) +
geom_line(aes(y = WST, color = "Stem weight"), linewidth = 1.2) +
geom_line(aes(y = WRT, color = "Root weight"), linewidth = 1.2) +
geom_line(aes(y = WSO, color = "Storage weight"), linewidth = 1.2) +
labs(title = "Biomass Production Over Time",
x = "Time",
y = "Weight (kg/ha)") +
scale_color_manual(values = c("Leaf weight" = "green",
"Stem weight" = "brown",
"Root weight" = "blue",
"Storage weight" = "orange")) +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
# Only plot LAI
ggplot(test, aes(x = time, y = LAI)) +
geom_line(color = "purple", linewidth = 1.2) +
labs(title = "Leaf Area Index (LAI) Over Time",
x = "Time",
y = "LAI") +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
source("~/GitHub/Modeling_yield/Scripts/Biomass_production.R", echo=TRUE)
source("~/GitHub/Modeling_yield/Scripts/Biomass_production.R", echo=TRUE)
source("~/GitHub/Modeling_yield/Scripts/DVS_calculation.R", echo=TRUE)
source("~/GitHub/Modeling_yield/Input_data/weather_data_2223.R", echo=TRUE)
#load specific coordinates
source("Input_data/LowerResolution.R")
library(maptools)
#load specific coordinates
source("Input_data/LowerResolution.R")
map=raster("Input_data/aggregated_landcover_raster_1x1km.tif")
res(map)
crs(map)
plot(map)
# Define the aggregation factor (from 100m to 1km)
agg_factor <- 50
# Aggregate the raster using the modal function
aggregated_raster <- aggregate(map, fact = agg_factor, fun = modal)
# Save the aggregated raster
writeRaster(aggregated_raster, "Input_data/aggregated_landcover_raster_50x50km.tif", format = "GTiff")
# Check the resolution of the resampled raster
res(aggregated_raster)
crs(aggregated_raster)
# Create a data frame with the aggregated raster values
df <- as.data.frame(aggregated_raster, xy = TRUE)
str(df)
unique(df$aggregated_landcover_raster_1x1km)
Wanted_Points<-df[df[,3] %in% c(12),]
plot(Wanted_Points$y~Wanted_Points$x, pch=20, col="red", xlab="X", ylab="Y", main="Wanted Points")
str(Wanted_Points)
# Rename the land use column
colnames(Wanted_Points)[3]<- "Land_Use"
# Replace 18 by Pastures and 26 by Natural grasslands
Wanted_Points$Land_Use[Wanted_Points$Land_Use==18]<- "Pastures"
Wanted_Points$Land_Use[Wanted_Points$Land_Use==26]<- "Natural grasslands"
Wanted_Points$Land_Use[Wanted_Points$Land_Use==22]<- "Agroforestry areas"
# Store the data frame in a CSV file
write.table(Wanted_Points, "Input_data/Wanted_Grassland_Points10km.csv", row.names = FALSE,sep=";")
# Convert the coordinates from the raster CRS to geographic coordinates (WGS84) ----
# Define the source and target CRS
source_crs <- "+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs"
target_crs <- "+proj=longlat +datum=WGS84 +no_defs"
# Create a spatial object from the Wanted_Points data frame
coordinates(Wanted_Points) <- ~x + y
proj4string(Wanted_Points) <- source_crs
# Transform the coordinates to the target CRS (WGS84)
Wanted_Points_transformed <- spTransform(Wanted_Points, target_crs)
# Extract the transformed coordinates and add them back to the data frame
Wanted_Points$Longitude <- coordinates(Wanted_Points_transformed)[, 1]
Wanted_Points$Latitude <- coordinates(Wanted_Points_transformed)[, 2]
# Inspect the updated data frame
head(Wanted_Points)
# Plot the transformed points
plot(Wanted_Points$Latitude ~ Wanted_Points$Longitude,
pch = 20, col = "blue",
xlab = "Longitude", ylab = "Latitude",
main = "Wanted Points in WGS84")
latitudes <-  Wanted_Points$Latitude
longitudes <- Wanted_Points$Longitude
# Define a sowing date and a harvest date
startDate <- "2022-09-01" # Change it to be the same as the growing season
# Define a sowing date and a harvest date
startDate <- "2022-10-01" # Change it to be the same as the growing season
endDate <- "2024-12-01"
dates <- c(startDate, endDate)
# Download the data from NASA POWER ----
Variables <- c("ALLSKY_SFC_SW_DWN", "PRECTOTCORR", "RH2M", "T2MDEW", "T2M_MAX", "T2M_MIN", "WS2M")
VarName <- c("Solar", "ppt", "RH", "Tdew", "Tmax", "Tmin", "windspeed")
# Download the data from NASA POWER
Europe_weather_data <- data.frame()
for (lat in latitudes) {
for (lon in longitudes) {
data <- nasapower::get_power(
community = "ag",
lonlat = c(lon, lat),
pars = Variables,
dates = dates,
temporal_api = "daily"
)
# Rename columns using VarName
names(data)[names(data) %in% Variables] <- VarName
Europe_weather_data <- rbind(Europe_weather_data, data)
}
}
View(Europe_weather_data)
# Edit the data frame ----
summary(Europe_weather_data)
class(Europe_weather_data$YYYYMMDD)
# Rename YYYYMMDD to date
colnames(Europe_weather_data)[colnames(Europe_weather_data) == "YYYYMMDD"] <- "Date"
#save the data
write.csv(Europe_weather_data, "Input_data/Europe_weather_data.csv", row.names = FALSE)
# Prepare the data ----
# Set working directory
setwd("~/GitHub/Modeling_yield")
# Load in crop data
source("Input_data/crop_data.R")
# Prepare the data ----
# Set working directory
setwd("~/GitHub/Modeling_yield")
# Load in crop data
source("Input_data/crop_data.R")
# Import the weather data
weather <- read.csv("Input_data/Europe_weather_data.csv")
weather$Date <- as.Date(weather$Date, format = "%Y-%m-%d")
# Calculate average temperature
weather <- weather %>%
mutate(
Tmean = (Tmax + Tmin) / 2
)
# Define crop TSUM thresholds ----
TSUM_stages <- c(crop$TSUMEM,crop$TSUMEM + crop$TSUM1, crop$TSUMEM + crop$TSUM1 + crop$TSUM2) # Cumulative TSUM values
DVS_stages <- c(0, 1, 2) # Corresponding development stages
# Create a identifier column for the weather
weather$ID <- paste0(weather$LON, "_", weather$LAT)
Unique_ID <- unique(weather$ID)
# Add a growing season identifier based on sowing dates
DVS_weather <- weather %>%
group_by(ID) %>%
arrange(Date) %>%
mutate(
# Assign Season_ID
Season_ID = sapply(Date, function(date) {
# Obtain year from Date
year <- as.numeric(format(date, "%Y"))
# Obtain month from Date
month <- as.numeric(format(date, "%m"))
# Obtain day from Date
day <- as.numeric(format(date, "%d"))
# Check if there are valid sowing date
if (month >= 10) {
return(year)
} else{
return(year - 1)
}})) %>%
ungroup()
unique(DVS_weather$Season_ID) # Check the unique season IDs
# Compute TSUM and DVS for each location per growing season
DVS_weather <- DVS_weather %>%
group_by(ID, Season_ID) %>%
arrange(Date) %>%
mutate(
TSUM = cumsum(Tmean), # Calculate cumulative sum of temperatures
DVS_stage = approx(x = TSUM_stages, y = DVS_stages, xout = TSUM, rule = 2)$y # Interpolate DVS
) %>%
ungroup()
str(DVS_weather)
summary(DVS_weather)
write.csv(DVS_weather, "Input_data/DVS_weather.csv", row.names = FALSE)
# Visualize the development stages
ggplot(data = DVS_weather, aes(x = Date, y = DVS_stage, color = ID)) +
geom_line() +
labs(title = "Development Stages (DVS) Over Time",
x = "Date",
y = "Development Stage (DVS)") +
theme_minimal() +
theme(legend.position = "none") # Remove legend for clarity
# Visualize the development stages
ggplot(data = DVS_weather, aes(x = Date, y = DVS_stage, color = ID)) +
geom_line() +
labs(title = "Development Stages (DVS) Over Time",
x = "Date",
y = "Development Stage (DVS)") +
theme_minimal() +
theme(legend.position = "none") # Remove legend for clarity
View(DVS_weather)
source("~/GitHub/Modeling_yield/Scripts/Biomass_production.R", echo=TRUE)
# Import the weather data ----
# source("Scripts/DVS_calculation.R")
read.csv("Input_data/DVS_weatherc.csv")
# Import the weather data ----
# source("Scripts/DVS_calculation.R")
DVS_weather <- read.csv("Input_data/DVS_weather.csv")
# Load in crop data
source("Input_data/crop_data.R")
# Import the weather data ----
# source("Scripts/DVS_calculation.R")
DVS_weather <- read.csv("Input_data/DVS_weather.csv")
# Import the biomass model function
source("Input_data/Biomass_function.R")
# Initial states ----
initial_leaf_weight <- 0.1
initial_stem_weight <- 0.1
initial_root_weight <- 0.1
initial_storage_weight <- 0
initial_LAI <- 0.1
state <- c(WLV = initial_leaf_weight,
WST = initial_stem_weight,
WRT = initial_root_weight,
WSO = initial_storage_weight,
LAI = initial_LAI)
any(is.na(DVS_weather))
which(is.na(DVS_weather))
# Remove NAs from the weather dataset
DVS_weather <- DVS_weather[complete.cases(DVS_weather), ]
# Define the root function
rootfun <- function(t, state, parms) {
with(as.list(state), {
# Access DVS_stage from parms
current_DVS <- parms$DVS_stage[t]
current_DVS - 2  # Root is found when DVS = 2
})
}
# Run the model for each location ----
# Loop the ode function through each coordinate
for (i in 1:length(Unique_ID)) {
weather_subset <- DVS_weather[DVS_weather$ID == Unique_ID[i],]
# Find unique seasons (Season_ID) for the current coordinate
season_IDs <- unique(weather_subset$Season_ID)
# Loop the ode function through each growing season
for (sowing_year in season_IDs) {
# Select the rows in the sowing_year
weather_subset_filtered <- weather_subset[weather_subset$Season_ID == sowing_year, ]
# Define the timestep
timestep <- 1 # Each day
# Define the number of time steps
num_steps <- nrow(weather_subset_filtered) # Number of observed days
# Define the time points for the ODE solver
times <- seq(1, num_steps, by = timestep)
# Run the ODE solver with events
out <- ode(y = state, times = times, func = crop_growth, parms = crop,
events = list(func = eventfun, time = times), rootfun = rootfun)
# Convert output to a data frame
out_df <- as.data.frame(out)
# Save the output
write.csv(out_df, paste0("Output/biomass_production_", Unique_ID[i], "_", sowing_year, ".csv"), row.names = FALSE)
}
}
View(DVS_weather)
setwd("~/GitHub/Modeling_yield")
# Load in crop data
source("Input_data/crop_data.R")
# Import the weather data ----
source("Scripts/DVS_calculation.R")
# Import the biomass model function
source("Input_data/Biomass_function.R")
# Initial states ----
initial_leaf_weight <- 0.1
initial_stem_weight <- 0.1
initial_root_weight <- 0.1
initial_storage_weight <- 0
initial_LAI <- 0.1
state <- c(WLV = initial_leaf_weight,
WST = initial_stem_weight,
WRT = initial_root_weight,
WSO = initial_storage_weight,
LAI = initial_LAI)
any(is.na(DVS_weather))
which(is.na(DVS_weather))
# Remove NAs from the weather dataset
DVS_weather <- DVS_weather[complete.cases(DVS_weather), ]
# Import the event function
source("Input_data/Event_function.R")
# Define the root function
rootfun <- function(t, state, parms) {
with(as.list(state), {
# Access DVS_stage from parms
current_DVS <- parms$DVS_stage[t]
current_DVS - 2  # Root is found when DVS = 2
})
}
# Run the model for each location ----
# Loop the ode function through each coordinate
for (i in 1:length(Unique_ID)) {
weather_subset <- DVS_weather[DVS_weather$ID == Unique_ID[i],]
# Find unique seasons (Season_ID) for the current coordinate
season_IDs <- unique(weather_subset$Season_ID)
# Loop the ode function through each growing season
for (sowing_year in season_IDs) {
# Select the rows in the sowing_year
weather_subset_filtered <- weather_subset[weather_subset$Season_ID == sowing_year, ]
# Define the timestep
timestep <- 1 # Each day
# Define the number of time steps
num_steps <- nrow(weather_subset_filtered) # Number of observed days
# Define the time points for the ODE solver
times <- seq(1, num_steps, by = timestep)
# Run the ODE solver with events
out <- ode(y = state, times = times, func = crop_growth, parms = crop,
events = list(func = eventfun, time = times), rootfun = rootfun)
# Convert output to a data frame
out_df <- as.data.frame(out)
# Save the output
write.csv(out_df, paste0("Output/biomass_production_", Unique_ID[i], "_", sowing_year, ".csv"), row.names = FALSE)
}
}
# Import the csvs as data frames
biomass_files <- list.files(path = "Output", pattern = "biomass_production_", full.names = TRUE)
biomass_data <- lapply(biomass_files, read.csv)
# Obtain the first 3 values in the list
test <- biomass_data[1:3]
test <- biomass_data[[2]]
# Plot the results ----
ggplot(test, aes(x = time)) +
geom_line(aes(y = WLV, color = "Leaf weight"), linewidth = 1.2) +
geom_line(aes(y = WST, color = "Stem weight"), linewidth = 1.2) +
geom_line(aes(y = WRT, color = "Root weight"), linewidth = 1.2) +
geom_line(aes(y = WSO, color = "Storage weight"), linewidth = 1.2) +
labs(title = "Biomass Production Over Time",
x = "Time",
y = "Weight (kg/ha)") +
scale_color_manual(values = c("Leaf weight" = "green",
"Stem weight" = "brown",
"Root weight" = "blue",
"Storage weight" = "orange")) +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
View(test)
test <- biomass_data[[3]]
# Plot the results ----
ggplot(test, aes(x = time)) +
geom_line(aes(y = WLV, color = "Leaf weight"), linewidth = 1.2) +
geom_line(aes(y = WST, color = "Stem weight"), linewidth = 1.2) +
geom_line(aes(y = WRT, color = "Root weight"), linewidth = 1.2) +
geom_line(aes(y = WSO, color = "Storage weight"), linewidth = 1.2) +
labs(title = "Biomass Production Over Time",
x = "Time",
y = "Weight (kg/ha)") +
scale_color_manual(values = c("Leaf weight" = "green",
"Stem weight" = "brown",
"Root weight" = "blue",
"Storage weight" = "orange")) +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
View(test)
# Plot the results ----
ggplot(test, aes(x = time)) +
geom_line(aes(y = WLV, color = "Leaf weight"), linewidth = 1.2) +
geom_line(aes(y = WST, color = "Stem weight"), linewidth = 1.2) +
geom_line(aes(y = WRT, color = "Root weight"), linewidth = 1.2) +
geom_line(aes(y = WSO, color = "Storage weight"), linewidth = 1.2) +
geom_line(aes = y = WSO.WSO, color = "Yield"), linewidth = 1.2) +
# Plot the results ----
ggplot(test, aes(x = time)) +
geom_line(aes(y = WLV, color = "Leaf weight"), linewidth = 1.2) +
geom_line(aes(y = WST, color = "Stem weight"), linewidth = 1.2) +
geom_line(aes(y = WRT, color = "Root weight"), linewidth = 1.2) +
geom_line(aes(y = WSO, color = "Storage weight"), linewidth = 1.2) +
geom_line(aes(y = WSO.WSO, color = "Yield"), linewidth = 1.2) +
labs(title = "Biomass Production Over Time",
x = "Time",
y = "Weight (kg/ha)") +
scale_color_manual(values = c("Leaf weight" = "green",
"Stem weight" = "brown",
"Root weight" = "blue",
"Storage weight" = "orange"),
"Yield" = "salmon") +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
# Plot the results ----
ggplot(test, aes(x = time)) +
geom_line(aes(y = WLV, color = "Leaf weight"), linewidth = 1.2) +
geom_line(aes(y = WST, color = "Stem weight"), linewidth = 1.2) +
geom_line(aes(y = WRT, color = "Root weight"), linewidth = 1.2) +
geom_line(aes(y = WSO, color = "Storage weight"), linewidth = 1.2) +
geom_line(aes(y = WSO.WSO, color = "Yield"), linewidth = 1.2) +
labs(title = "Biomass Production Over Time",
x = "Time",
y = "Weight (kg/ha)") +
scale_color_manual(values = c("Leaf weight" = "green",
"Stem weight" = "brown",
"Root weight" = "blue",
"Storage weight" = "orange"),
"Yield" = "salmon") +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
# Plot the results ----
ggplot(test, aes(x = time)) +
# Plot the results ----
ggplot(test, aes(x = time)) +
geom_line(aes(y = WLV, color = "Leaf weight"), linewidth = 1.2) +
geom_line(aes(y = WST, color = "Stem weight"), linewidth = 1.2) +
geom_line(aes(y = WRT, color = "Root weight"), linewidth = 1.2) +
geom_line(aes(y = WSO, color = "Storage weight"), linewidth = 1.2) +
geom_line(aes(y = WSO.WSO, linewidth = 1.2)) +
labs(title = "Biomass Production Over Time",
x = "Time",
y = "Weight (kg/ha)") +
scale_color_manual(values = c("Leaf weight" = "green",
"Stem weight" = "brown",
"Root weight" = "blue",
"Storage weight" = "orange")) +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
test <- biomass_data[[3]]
# Plot the results ----
ggplot(test, aes(x = time)) +
geom_line(aes(y = WLV, color = "Leaf weight"), linewidth = 1.2) +
geom_line(aes(y = WST, color = "Stem weight"), linewidth = 1.2) +
geom_line(aes(y = WRT, color = "Root weight"), linewidth = 1.2) +
geom_line(aes(y = WSO, color = "Storage weight"), linewidth = 1.2) +
geom_line(aes(y = WSO.WSO, linewidth = 1.2)) +
labs(title = "Biomass Production Over Time",
x = "Time",
y = "Weight (kg/ha)") +
scale_color_manual(values = c("Leaf weight" = "green",
"Stem weight" = "brown",
"Root weight" = "blue",
"Storage weight" = "orange")) +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
# Plot the results ----
ggplot(test, aes(x = time)) +
geom_line(aes(y = WLV, color = "Leaf weight"), linewidth = 1.2) +
geom_line(aes(y = WST, color = "Stem weight"), linewidth = 1.2) +
geom_line(aes(y = WRT, color = "Root weight"), linewidth = 1.2) +
geom_line(aes(y = WSO, color = "Storage weight"), linewidth = 1.2) +
geom_line(aes(y = WSO.WSO)) +
labs(title = "Biomass Production Over Time",
x = "Time",
y = "Weight (kg/ha)") +
scale_color_manual(values = c("Leaf weight" = "green",
"Stem weight" = "brown",
"Root weight" = "blue",
"Storage weight" = "orange")) +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
# Plot the results ----
ggplot(test, aes(x = time)) +
geom_line(aes(y = WLV, color = "Leaf weight"), linewidth = 1.2) +
geom_line(aes(y = WST, color = "Stem weight"), linewidth = 1.2) +
geom_line(aes(y = WRT, color = "Root weight"), linewidth = 1.2) +
geom_line(aes(y = WSO, color = "Storage weight"), linewidth = 1.2) +
geom_line(aes(y = WSO.WSO, color = "Yield")) +
labs(title = "Biomass Production Over Time",
x = "Time",
y = "Weight (kg/ha)") +
scale_color_manual(values = c("Leaf weight" = "green",
"Stem weight" = "brown",
"Root weight" = "blue",
"Storage weight" = "orange",
"Yield" = "salmon")) +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
# Only plot LAI
ggplot(test, aes(x = time, y = LAI)) +
geom_line(color = "purple", linewidth = 1.2) +
labs(title = "Leaf Area Index (LAI) Over Time",
x = "Time",
y = "LAI") +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
