geom_line() +
labs(title = "Development Stages (DVS) Over Time",
x = "Date",
y = "Development Stage (DVS)") +
theme_minimal() +
theme(legend.position = "none") # Remove legend for clarity
# Visualize the development stages
ggplot(data = DVS_weather, aes(x = Date, y = DVS_stage, color = ID)) +
geom_line() +
labs(title = "Development Stages (DVS) Over Time",
x = "Date",
y = "Development Stage (DVS)") +
scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") +
theme_minimal() +
theme(legend.position = "none") # Remove legend for clarity
ggThemeAssist:::ggThemeAssistAddin()
# Visualize the development stages
ggplot(data = DVS_weather, aes(x = Date, y = DVS_stage, color = ID)) +
geom_line() +
labs(title = "Development Stages (DVS) Over Time",
x = "Date",
y = "Development Stage (DVS)") +
scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") +
theme_minimal() +
theme(legend.position = "none")  +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
axis.text.x = element_text(vjust = 0.35, angle = 15),
plot.title = element_text(size = 15))# Remove legend for clarity
# Visualize the development stages
ggplot(data = DVS_weather, aes(x = Date, y = DVS_stage, color = ID)) +
geom_line() +
labs(title = "Development Stages (DVS) Over Time",
x = "Date",
y = "Development Stage (DVS)") +
scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + # Show date each 3 months, starting from October
theme_minimal() +
theme(legend.position = "none")  +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
axis.text.x = element_text(vjust = 0.35, angle = 15),
plot.title = element_text(size = 15), # Remove legend for clarity
plot.margin = margin(10, 10, 10, 10))
# Visualize the development stages
ggplot(data = DVS_weather, aes(x = Date, y = DVS_stage, color = ID)) +
geom_line() +
labs(title = "Development Stages (DVS) Over Time",
x = "Date",
y = "Development Stage (DVS)") +
scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + # Show date each 3 months, starting from October
theme_minimal() +
theme(legend.position = "none")  +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
axis.text.x = element_text(vjust = 0.35, angle = 15),
plot.title = element_text(size = 15), # Remove legend for clarity
plot.margin = margin(10, 10, 10, 20))
# Visualize the development stages
ggplot(data = DVS_weather, aes(x = Date, y = DVS_stage, color = ID)) +
geom_line() +
labs(title = "Development Stages (DVS) Over Time",
x = "Date",
y = "Development Stage (DVS)") +
scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + # Show date each 3 months, starting from October
theme_minimal() +
theme(legend.position = "none")  +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
axis.text.x = element_text(vjust = 0.35, angle = 15),
plot.title = element_text(size = 15), # Remove legend for clarity
plot.margin = margin(10, 10, 20, 10))
# Visualize the development stages
ggplot(data = DVS_weather, aes(x = Date, y = DVS_stage, color = ID)) +
geom_line() +
labs(title = "Development Stages (DVS) Over Time",
x = "Date",
y = "Development Stage (DVS)") +
scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + # Show date each 3 months, starting from October
theme_minimal() +
theme(legend.position = "none")  +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
axis.text.x = element_text(vjust = 0.35, angle = 15),
plot.title = element_text(size = 15), # Remove legend for clarity
plot.margin = margin(10, 20, 10, 10))
# Visualize the development stages
ggplot(data = DVS_weather, aes(x = Date, y = DVS_stage, color = ID)) +
geom_line() +
labs(title = "Development Stages (DVS) Over Time",
x = "Date",
y = "Development Stage (DVS)") +
scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + # Show date each 3 months, starting from October
theme_minimal() +
theme(legend.position = "none")  +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
axis.text.x = element_text(vjust = 0.35, angle = 15),
plot.title = element_text(size = 15), # Remove legend for clarity
plot.margin = margin(10, 22, 10, 10))
# Export the plot
ggsave("Output/DVS_plot.png", width = 10, height = 6, dpi = 300)
# Import the csvs as data frames
biomass_files <- list.files(path = "Output", pattern = "biomass_production_", full.names = TRUE)
biomass_data <- lapply(biomass_files, read.csv)
# Extract final WSO (storage organ biomass) for each file
yield_data <- data.frame(
File = basename(biomass_files),
Unique_ID = NA,
Season_ID = NA,
Final_WSO_kg_ha = NA
)
for (i in seq_along(biomass_data)) {
df <- biomass_data[[i]]
# Extract final WSO
final_WSO <- sum(df$WSO)  # kg/ha
# Extract pixel and season info from filename
file_parts <- unlist(strsplit(gsub("biomass_production_|\\.csv", "", yield_data$File[i]), "_"))
yield_data$Unique_ID[i] <- paste(file_parts[1], file_parts[2], sep = "_")
yield_data$Season_ID[i] <- file_parts[3]
yield_data$Final_WSO_kg_ha[i] <- final_WSO
}
View(yield_data)
# Split the Unique_ID column into Longitude and Latitude
library(tidyr)
yield_data <- yield_data %>%
separate(Unique_ID, into = c("Longitude", "Latitude"), sep = "_", convert = TRUE)
str(yield_data)
head(yield_data)
View(yield_data)
View(yield_data)
write.csv(yield_data, "Output/biomass_yield.csv", row.names = FALSE)
# Plot the results ----
ggplot(test, aes(x = time)) +
geom_line(aes(y = WLV, color = "Leaf weight"), linewidth = 1.2) +
geom_line(aes(y = WST, color = "Stem weight"), linewidth = 1.2) +
geom_line(aes(y = WRT, color = "Root weight"), linewidth = 1.2) +
geom_line(aes(y = WSO, color = "Storage weight"), linewidth = 1.2) +
labs(title = "Biomass Production Over Time",
x = "Time",
y = "Weight (kg/ha)") +
scale_color_manual(values = c("Leaf weight" = "green",
"Stem weight" = "brown",
"Root weight" = "blue",
"Storage weight" = "orange",
"Yield" = "salmon")) +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
test <- biomass_data[[2]]
# Plot the results ----
ggplot(test, aes(x = time)) +
geom_line(aes(y = WLV, color = "Leaf weight"), linewidth = 1.2) +
geom_line(aes(y = WST, color = "Stem weight"), linewidth = 1.2) +
geom_line(aes(y = WRT, color = "Root weight"), linewidth = 1.2) +
geom_line(aes(y = WSO, color = "Storage weight"), linewidth = 1.2) +
labs(title = "Biomass Production Over Time",
x = "Time",
y = "Weight (kg/ha)") +
scale_color_manual(values = c("Leaf weight" = "green",
"Stem weight" = "brown",
"Root weight" = "blue",
"Storage weight" = "orange",
"Yield" = "salmon")) +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
library(sf)
library(dplyr)
library(readr)
library(rnaturalearth)
library(ggplot2)
# 2. Bounding Box defining (bigger area around Switzerland)
lon_min <- 5.5
lon_max <- 10.7
lat_min <- 45.5
lat_max <- 48.3
# 3. Daten im Bounding Box filtern
Swiss_region_points <-  dat %>%
filter(Longitude >= lon_min, Longitude <= lon_max,
Latitude  >= lat_min,  Latitude  <= lat_max)
dat <- read_csv("WSO_2023.csv")
dat <- read_csv("Input_data/WSO_2023.csv")
# 3. Daten im Bounding Box filtern
Swiss_region_points <-  dat %>%
filter(Longitude >= lon_min, Longitude <= lon_max,
Latitude  >= lat_min,  Latitude  <= lat_max)
countries <- ne_countries(scale = "medium", returnclass = "sf")
##########Plot
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)
# List of defined states in Europe
eu_countries <- ("Switzerland")
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
countries %>%
filter(admin %in% c("Switzerland", "Germany", "Italy"))
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
countries %>%
filter(admin %in% c("Switzerland"))
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
ggplot() +
geom_sf(data = europe_selected, fill = NA, color = "black", size = 0.5) +  # borders of countries
geom_point(data = Swiss_region_points, aes(x = Longitude, y = Latitude, color = Final_WSO_kg_ha), size = 2) +
scale_color_gradient(low = "chocolate", high = "darkgreen") +
labs(title = "Biomass 2023",
x = "Longitude",
y = "Latitude",
color = "WSO [kg/ha]") +
coord_sf(xlim = c(5.5, 10.7), ylim = c(45.5, 48.7), expand = FALSE) +
theme_minimal()
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
ggplot() +
geom_sf(data = europe_selected, fill = NA, color = "black", size = 0.5) +  # borders of countries
geom_point(data = Swiss_region_points, aes(x = Longitude, y = Latitude, color = Final_WSO_kg_ha), size = 2) +
scale_color_gradient(low = "chocolate", high = "darkgreen") +
labs(title = "Biomass 2023",
x = "Longitude",
y = "Latitude",
color = "WSO [kg/ha]") +
coord_sf(xlim = c(5.5, 10.7), ylim = c(45.5, 48.7), expand = FALSE) +
theme_minimal()
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
countries %>%
filter(admin %in% c("Switzerland"))
ggplot() +
geom_sf(data = europe_selected, fill = NA, color = "black", size = 0.5) +  # borders of countries
geom_point(data = Swiss_region_points, aes(x = Longitude, y = Latitude, color = Final_WSO_kg_ha), size = 2) +
scale_color_gradient(low = "chocolate", high = "darkgreen") +
labs(title = "Biomass 2023",
x = "Longitude",
y = "Latitude",
color = "WSO [kg/ha]") +
coord_sf(xlim = c(5.5, 10.7), ylim = c(45.5, 48.7), expand = FALSE) +
theme_minimal()
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
ggplot() +
geom_sf(data = europe_selected, fill = "green4", alpha = 0.4, color = "black", size = 0.5) +  # borders of countries
geom_point(data = Swiss_region_points, aes(x = Longitude, y = Latitude, color = Final_WSO_kg_ha), size = 2) +
scale_color_gradient(low = "chocolate", high = "darkgreen") +
labs(title = "Biomass 2023",
x = "Longitude",
y = "Latitude",
color = "WSO [kg/ha]") +
coord_sf(xlim = c(5.5, 10.7), ylim = c(45.5, 48.7), expand = FALSE) +
theme_minimal()
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
countries %>%
filter(admin %in% c("Switzerland", "Germany", "Italy"))
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
countries %>%
filter(admin %in% c("Switzerland"))
ggplot() +
geom_sf(data = europe_selected, fill = "green4", alpha = 0.4, color = "black", size = 0.5) +  # borders of countries
geom_point(data = Swiss_region_points, aes(x = Longitude, y = Latitude, color = Final_WSO_kg_ha), size = 2) +
scale_color_gradient(low = "chocolate", high = "darkgreen") +
labs(title = "Biomass 2023",
x = "Longitude",
y = "Latitude",
color = "WSO [kg/ha]") +
coord_sf(xlim = c(5.5, 10.7), ylim = c(45.5, 48.7), expand = FALSE) +
theme_minimal()
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
countries %>%
filter(admin %in% c("Switzerland"))
class(europe_selected)
class(europe_selected)
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
ggplot() +
geom_sf(data = europe_selected, fill = "green4", alpha = 0.4, color = "black", size = 2) +  # borders of countries
geom_point(data = Swiss_region_points, aes(x = Longitude, y = Latitude, color = Final_WSO_kg_ha), size = 2) +
scale_color_gradient(low = "chocolate", high = "darkgreen") +
labs(title = "Biomass 2023",
x = "Longitude",
y = "Latitude",
color = "WSO [kg/ha]") +
coord_sf(xlim = c(5.5, 10.7), ylim = c(45.5, 48.7), expand = FALSE) +
theme_minimal()
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
countries %>%
filter(admin %in% c("Switzerland"))
ggplot() +
geom_sf(data = europe_selected, fill = "green4", alpha = 0.4, color = "black", size = 2) +  # borders of countries
geom_point(data = Swiss_region_points, aes(x = Longitude, y = Latitude, color = Final_WSO_kg_ha), size = 2) +
scale_color_gradient(low = "chocolate", high = "darkgreen") +
labs(title = "Biomass 2023",
x = "Longitude",
y = "Latitude",
color = "WSO [kg/ha]") +
coord_sf(xlim = c(5.5, 10.7), ylim = c(45.5, 48.7), expand = FALSE) +
theme_minimal()
ggplot() +
geom_sf(data = europe_selected, fill = "green4", alpha = 0.4, color = "black", size = 2) +  # borders of countries
geom_point(data = Swiss_region_points, aes(x = Longitude, y = Latitude, color = Final_WSO_kg_ha), size = 2) +
scale_color_gradient(low = "chocolate", high = "darkgreen") +
labs(title = "Biomass 2023",
x = "Longitude",
y = "Latitude",
color = "WSO [kg/ha]") +
coord_sf(xlim = c(5.5, 10.7), ylim = c(45.5, 48.7), expand = FALSE) +
theme_minimal()
ggplot() +
geom_sf(data = europe_selected, fill = "green4", alpha = 0.4, color = "black", size = 2) +  # borders of countries
geom_point(data = Swiss_region_points, aes(x = Longitude, y = Latitude, color = Final_WSO_kg_ha), size = 2) +
scale_color_gradient(low = "chocolate", high = "darkgreen") +
labs(title = "Biomass 2023",
x = "Longitude",
y = "Latitude",
color = "WSO [kg/ha]") +
coord_sf(xlim = c(5.5, 10.7), ylim = c(45.5, 48.7), expand = FALSE) +
theme_minimal()
ggplot() +
geom_sf(data = europe_selected, fill = "green4", alpha = 0.4, color = "black", size = 2) +  # borders of countries
geom_point(data = Swiss_region_points, aes(x = Longitude, y = Latitude, color = Final_WSO_kg_ha), size = 2) +
scale_color_gradient(low = "chocolate", high = "darkgreen") +
labs(title = "Biomass 2023",
x = "Longitude",
y = "Latitude",
color = "WSO [kg/ha]") +
coord_sf(xlim = c(5.5, 10.7), ylim = c(45.5, 48.7), expand = FALSE) +
theme_minimal()
ggplot() +
geom_sf(data = europe_selected, fill = "green4", alpha = 0.4, color = "black", size = 2) +  # borders of countries
geom_point(data = Swiss_region_points, aes(x = Longitude, y = Latitude, color = Final_WSO_kg_ha), size = 2) +
scale_color_gradient(low = "chocolate", high = "darkgreen") +
labs(title = "Biomass 2023",
x = "Longitude",
y = "Latitude",
color = "WSO [kg/ha]") +
coord_sf(xlim = c(5.5, 10.7), ylim = c(45.5, 48.7), expand = FALSE) +
theme_minimal()
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
ggplot() +
geom_sf(data = europe_selected, fill = "green4", alpha = 0.4, color = "black", linewidth = 2) +  # borders of countries
geom_point(data = Swiss_region_points, aes(x = Longitude, y = Latitude, color = Final_WSO_kg_ha), size = 2) +
scale_color_gradient(low = "chocolate", high = "darkgreen") +
labs(title = "Biomass 2023",
x = "Longitude",
y = "Latitude",
color = "WSO [kg/ha]") +
coord_sf(xlim = c(5.5, 10.7), ylim = c(45.5, 48.7), expand = FALSE) +
theme_minimal()
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
countries %>%
filter(admin %in% c("Switzerland", "Germany", "Italy"))
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
countries %>%
filter(admin %in% c("Switzerland"))
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
ggplot() +
geom_sf(data = europe_selected, fill = "green4", alpha = 0.4, color = "black", linewidth = 2) +  # borders of countries
geom_point(data = Swiss_region_points, aes(x = Longitude, y = Latitude, color = Final_WSO_kg_ha), size = 2) +
scale_color_gradient(low = "chocolate", high = "darkgreen") +
labs(title = "Biomass 2023",
x = "Longitude",
y = "Latitude",
color = "WSO [kg/ha]") +
coord_sf(xlim = c(5.5, 10.7), ylim = c(45.5, 48.7), expand = FALSE) +
theme_minimal()
ggplot() +
geom_sf(data = europe_selected, fill = "green4", alpha = 0.4, color = "black", linewidth = 2) +  # borders of countries
geom_point(data = Swiss_region_points, aes(x = Longitude, y = Latitude, color = Final_WSO_kg_ha), size = 2) +
scale_color_gradient(low = "chocolate", high = "darkgreen") +
labs(title = "Biomass 2023",
x = "Longitude",
y = "Latitude",
color = "WSO [kg/ha]") +
coord_sf(xlim = c(5.5, 10.7), ylim = c(45.5, 48.7), expand = FALSE) +
theme_minimal()
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
countries %>%
filter(admin %in% c("Switzerland", "Germany", "Italy"))
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
countries %>%
filter(admin %in% c("Switzerland"))
ggplot() +
geom_sf(data = europe_selected, fill = "green4", alpha = 0.4, color = "black", linewidth = 2) +  # borders of countries
geom_point(data = Swiss_region_points, aes(x = Longitude, y = Latitude, color = Final_WSO_kg_ha), size = 2) +
scale_color_gradient(low = "chocolate", high = "darkgreen") +
labs(title = "Biomass 2023",
x = "Longitude",
y = "Latitude",
color = "WSO [kg/ha]") +
coord_sf(xlim = c(5.5, 10.7), ylim = c(45.5, 48.7), expand = FALSE) +
theme_minimal()
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
ggplot() +
geom_sf(data = europe_selected, fill = "green4", alpha = 0.4, color = "black", linewidth = 2) +  # borders of countries
geom_point(data = Swiss_region_points, aes(x = Longitude, y = Latitude, color = Final_WSO_kg_ha), size = 5) +
scale_color_gradient(low = "chocolate", high = "darkgreen") +
labs(title = "Biomass 2023",
x = "Longitude",
y = "Latitude",
color = "WSO [kg/ha]") +
coord_sf(xlim = c(5.5, 10.7), ylim = c(45.5, 48.7), expand = FALSE) +
theme_minimal()
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
countries %>%
filter(admin %in% c("Switzerland", "Germany", "Italy"))
ggplot() +
geom_sf(data = europe_selected, fill = "green4", alpha = 0.4, color = "black", linewidth = 2) +  # borders of countries
geom_point(data = Swiss_region_points, aes(x = Longitude, y = Latitude, color = Final_WSO_kg_ha), size = 5) +
scale_color_gradient(low = "chocolate", high = "darkgreen") +
labs(title = "Biomass 2023",
x = "Longitude",
y = "Latitude",
color = "WSO [kg/ha]") +
coord_sf(xlim = c(5.5, 10.7), ylim = c(45.5, 48.7), expand = FALSE) +
theme_minimal()
# Obtain data for Switzerland from the data frame countries
# Use function filter() from dplyr
# First observe the dataset countries to see in which column are the country names
europe_selected <- # your code here
countries %>%
filter(admin %in% c("Switzerland"))
ggplot() +
geom_sf(data = europe_selected, fill = "green4", alpha = 0.4, color = "black", linewidth = 2) +  # borders of countries
geom_point(data = Swiss_region_points, aes(x = Longitude, y = Latitude, color = Final_WSO_kg_ha), size = 5) +
scale_color_gradient(low = "chocolate", high = "darkgreen") +
labs(title = "Biomass 2023",
x = "Longitude",
y = "Latitude",
color = "WSO [kg/ha]") +
coord_sf(xlim = c(5.5, 10.7), ylim = c(45.5, 48.7), expand = FALSE) +
theme_minimal()
ggplot() +
geom_sf(data = europe_selected, fill = "green4", alpha = 0.4, color = "black", linewidth = 2) +  # borders of countries
geom_point(data = Swiss_region_points, aes(x = Longitude, y = Latitude, color = Final_WSO_kg_ha), size = 5) +
scale_color_gradient(low = "chocolate", high = "darkgreen") +
labs(title = "Biomass yield in Switzerland 2023",
x = "Longitude",
y = "Latitude",
color = "WSO [kg/ha]") +
coord_sf(xlim = c(5.5, 10.7), ylim = c(45.5, 48.7), expand = FALSE) +
theme_minimal()
ggplot() +
geom_sf(data = europe_selected, fill = "green4", color = "black", linewidth = 2) +  # borders of countries
geom_point(data = Swiss_region_points, aes(x = Longitude, y = Latitude, color = Final_WSO_kg_ha), size = 5) +
scale_color_gradient(low = "chocolate", high = "darkgreen") +
labs(title = "Biomass yield in Switzerland 2023",
x = "Longitude",
y = "Latitude",
color = "WSO [kg/ha]") +
coord_sf(xlim = c(5.5, 10.7), ylim = c(45.5, 48.7), expand = FALSE) +
theme_minimal()
ggplot() +
geom_sf(data = europe_selected, fill = "green4", alpha = 0.4, color = "black", linewidth = 2) +  # borders of countries
geom_point(data = Swiss_region_points, aes(x = Longitude, y = Latitude, color = Final_WSO_kg_ha), size = 5) +
scale_color_gradient(low = "chocolate", high = "darkgreen") +
labs(title = "Biomass yield in Switzerland 2023",
x = "Longitude",
y = "Latitude",
color = "WSO [kg/ha]") +
coord_sf(xlim = c(5.5, 10.7), ylim = c(45.5, 48.7), expand = FALSE) +
theme_minimal()
?ggplot
