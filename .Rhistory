geom_point() +
theme_classic() +
coord_cartesian(xlim = c(0, 4), ylim = c(0, 4))+
geom_line(data = posteriorData, aes(x = years, y = prediction,group=id),alpha=0.1, color ="blue")+
xlab("years")
View(measurements)
#plot all samples from the posterior
ggplot(measurements, aes(years, measured)) +
geom_point() +
theme_classic() +
coord_cartesian(xlim = c(0, 4), ylim = c(0, 4))+
geom_line(data = posteriorData, aes(x = years, y = prediction,group=id),alpha=0.1, color ="blue")+
xlab("years")
View(posteriorData)
View(prior)
View(measurements)
View(Errors)
View(Errors)
# Run the model 10000 times for each k
for(i in 1:nrow(prior)){
# Assign the parameter set to the model
# Define the initial state of the system
State <- c(C = Cini)
# Define the parameters of the model
Pars <- c(k = prior$k[i])
# Run the model for the parameter set and make a data frame of the output
out <- rk4(y = State, times = time, func = LinearModel, parms = pars)
out <- as.data.frame(out)
# adjusting the name of out to match the data
colnames(out) <- c("years","prediction")
# Step 3.3: Join the prediction of the model for each data point
Errors <- merge(measurements, out, by.x = "years")
# Step 3.4: Compute the probability of observing each data point, given the model and the measurement uncertainty, assuming a normal (gaussian) distribution of errors
Errors$probability <- dnorm(Errors$measured, mean = Errors$prediction, sd = Errors$sd)
# Step 3.5: Compute the likelihood for each parameter set (the product of all individual probabilities)
prior$likelihood[i] <- prod(Errors$probability)
}
#Lmax<-prod(dnorm(x=measurements$y,mean=measurements$y,sd=measurements$sd)) #computing the maximum possible likelihood with the current sample
Lmax <- max(prior$likelihood)
prior$likelihoodRel <- prior$likelihood/Lmax # compute the relative likelihood for each parameters set
prior$Accept <- FALSE
prior$Accept[ ( runif(nrow(prior)) < prior$likelihoodRel )]<-TRUE # create a random number between 1 and 0 for each parameter set, and accept it if the random number is smaller than the relative likelihood
posteriorAR <- prior[prior$Accept,]
View(posteriorAR)
for(i in 1: nrow(posteriorAR)){
# Define the initial state of the system for one sample
State <- c(C = Cini)
# Define the parameters of the model
Pars <- c(slope = posteriorAR$k[i])
# Run the model for the parameter set and make a data frame of the output for one sample
out <- euler(y = State, times = time, func = LinearModel, parms = pars)
# Assign the ID of the sample to the output and join the output to the posterior data frame
OneSample <- as.data.frame(out)
colnames(OneSample) <- c("years","prediction")
OneSample$id <- i
if(i == 1){posteriorData <- OneSample}else{
posteriorData <- rbind(posteriorData,OneSample)
}
}
#plot all samples from the posterior
ggplot(measurements, aes(years, measured)) +
geom_point() +
theme_classic() +
coord_cartesian(xlim = c(0, 4), ylim = c(0, 4))+
geom_line(data = posteriorData, aes(x = years, y = prediction, group = id),alpha=0.1, color ="blue")+
xlab("years")
View(posteriorAR)
for(i in 1: nrow(posteriorAR)){
# Define the initial state of the system for one sample
State <- c(C = Cini)
# Define the parameters of the model
Pars <- c(slope = posteriorAR$k[i])
# Run the model for the parameter set and make a data frame of the output for one sample
out <- rk4(y = State, times = time, func = LinearModel, parms = pars)
# Assign the ID of the sample to the output and join the output to the posterior data frame
OneSample <- as.data.frame(out)
colnames(OneSample) <- c("years","prediction")
OneSample$id <- i
if(i == 1){posteriorData <- OneSample}else{
posteriorData <- rbind(posteriorData,OneSample)
}
}
View(measurements)
View(Errors)
View(prior)
View(prior)
prior$Accept
prior$likelihoodRel <- prior$likelihood/Lmax # compute the relative likelihood for each parameters set
prior$Accept <- FALSE
prior$Accept[ ( runif(nrow(prior)) < prior$likelihoodRel )]<-TRUE # create a random number between 1 and 0 for each parameter set, and accept it if the random number is smaller than the relative likelihood
View(prior)
# Define the model
LinearModel <- function(Time, State, Pars){
with(as.list(c(State, Pars)),{
dC <- -k * C
return(list(c(dC)))
})
}
# Define the time step
time <- seq(0, 5, 0.2)
# Define the initial value
Cini <- 100
State <- c(C = Cini)
# Define the parameres
k <- -.5
pars <- k
# Run the model
out <- rk4(y = State, times = time, func = LinearModel, parms = pars)
# Sampling step ----
SizeOfPrior <- 10000
# Create 10000 random values of k
prior <- data.frame(k = rnorm(n = SizeOfPrior, mean = 1, sd = .5))
# Creating empty columns for to store the probabilities, likelihoods and the predictions
prior$likelihood <- NA
measurements$probability <- NA
# Run the model 10000 times for each k
for(i in 1:nrow(prior)){
# Define the parameters of the model
Pars <- c(k = prior$k[i])
# Run the model for the parameter set and make a data frame of the output
out <- rk4(y = State, times = time, func = LinearModel, parms = pars)
out <- as.data.frame(out)
# adjusting the name of out to match the data
colnames(out) <- c("years","prediction")
# Step 3.3: Join the prediction of the model for each data point
Errors <- merge(measurements, out, by.x = "years")
# Step 3.4: Compute the probability of observing each data point, given the model and the measurement uncertainty, assuming a normal (gaussian) distribution of errors
Errors$probability <- dnorm(Errors$measured, mean = Errors$prediction, sd = Errors$sd)
# Step 3.5: Compute the likelihood for each parameter set (the product of all individual probabilities)
prior$likelihood[i] <- prod(Errors$probability)
}
View(prior)
View(prior)
#Lmax<-prod(dnorm(x=measurements$y,mean=measurements$y,sd=measurements$sd)) #computing the maximum possible likelihood with the current sample
Lmax <- max(prior$likelihood)
# Run the model 10000 times for each k
for(i in 1:nrow(prior)){
# Define the parameters of the model
pars <- c(k = prior$k[i])
# Run the model for the parameter set and make a data frame of the output
out <- rk4(y = State, times = time, func = LinearModel, parms = pars)
out <- as.data.frame(out)
# adjusting the name of out to match the data
colnames(out) <- c("years","prediction")
# Step 3.3: Join the prediction of the model for each data point
Errors <- merge(measurements, out, by.x = "years")
# Step 3.4: Compute the probability of observing each data point, given the model and the measurement uncertainty, assuming a normal (gaussian) distribution of errors
Errors$probability <- dnorm(Errors$measured, mean = Errors$prediction, sd = Errors$sd)
# Step 3.5: Compute the likelihood for each parameter set (the product of all individual probabilities)
prior$likelihood[i] <- prod(Errors$probability)
}
#Lmax<-prod(dnorm(x=measurements$y,mean=measurements$y,sd=measurements$sd)) #computing the maximum possible likelihood with the current sample
Lmax <- max(prior$likelihood)
View(prior)
prior$likelihoodRel <- prior$likelihood/Lmax # compute the relative likelihood for each parameters set
prior$Accept <- FALSE
prior$Accept[ ( runif(nrow(prior)) < prior$likelihoodRel )]<-TRUE # create a random number between 1 and 0 for each parameter set, and accept it if the random number is smaller than the relative likelihood
posteriorAR <- prior[prior$Accept,]
View(posteriorAR)
for(i in 1: nrow(posteriorAR)){
# Define the initial state of the system for one sample
State <- c(C = Cini)
# Define the parameters of the model
pars <- c(slope = posteriorAR$k[i])
# Run the model for the parameter set and make a data frame of the output for one sample
out <- rk4(y = State, times = time, func = LinearModel, parms = pars)
# Assign the ID of the sample to the output and join the output to the posterior data frame
OneSample <- as.data.frame(out)
colnames(OneSample) <- c("years","prediction")
OneSample$id <- i
if(i == 1){posteriorData <- OneSample}else{
posteriorData <- rbind(posteriorData,OneSample)
}
}
View(posteriorAR)
#plot all samples from the posterior
ggplot(measurements, aes(years, measured)) +
geom_point() +
theme_classic() +
coord_cartesian(xlim = c(0, 4), ylim = c(0, 4))+
geom_line(data = posteriorData, aes(x = years, y = prediction, group = id),alpha=0.1, color ="blue")+
xlab("years")
View(measurements)
View(posteriorData)
View(measurements)
View(posteriorData)
#plot all samples from the posterior
ggplot(measurements, aes(years, measured)) +
geom_point() +
theme_classic() +
coord_cartesian(xlim = c(0, 4), ylim = c(0, 4))+
geom_line(data = posteriorData, aes(x = years, y = prediction, group = id),alpha=0.1, color ="blue")+
xlab("years")
#plot all samples from the posterior
ggplot(measurements, aes(years, measured)) +
geom_point() +
theme_classic() +
coord_cartesian(xlim = c(0, 4), ylim = c(0, 4))+
geom_line(data = posteriorData, aes(x = years, y = prediction, group = id),alpha=0.1, color ="blue")+
xlab("years")
#plot all samples from the posterior
ggplot(measurements, aes(years, measured)) +
geom_point() +
theme_classic() +
# coord_cartesian(xlim = c(0, 4), ylim = c(0, 4))+
geom_line(data = posteriorData, aes(x = years, y = prediction, group = id),alpha=0.1, color ="blue")+
xlab("years")
View(posteriorAR)
View(prior)
# Initial values ----
# Create measurement data frame
measurements <- data.frame(years = c(1, 2, 3, 4), measured = c(55, 28, 16, 7))
measurements$sd <- 5
# Define the model
LinearModel <- function(Time, State, Pars){
with(as.list(c(State, Pars)),{
dC <- -k * C
return(list(c(dC)))
})
}
# Define the time step
time <- seq(0, 5, 0.2)
# Define the initial value
Cini <- 100
State <- c(C = Cini)
# Define the parameres
k <- -.5
pars <- k
# Run the model
out <- rk4(y = State, times = time, func = LinearModel, parms = pars)
# Sampling step ----
SizeOfPrior <- 10000
# Create 10000 random values of k
prior <- data.frame(k = rnorm(n = SizeOfPrior, mean = 1, sd = .5))
# Creating empty columns for to store the probabilities, likelihoods and the predictions
prior$likelihood <- NA
measurements$probability <- NA
# Run the model 10000 times for each k
for(i in 1:nrow(prior)){
# Define the parameters of the model
pars <- c(k = prior$k[i])
# Run the model for the parameter set and make a data frame of the output
out <- rk4(y = State, times = time, func = LinearModel, parms = pars)
out <- as.data.frame(out)
# adjusting the name of out to match the data
colnames(out) <- c("years","prediction")
# Step 3.3: Join the prediction of the model for each data point
Errors <- merge(measurements, out, by.x = "years")
# Step 3.4: Compute the probability of observing each data point, given the model and the measurement uncertainty, assuming a normal (gaussian) distribution of errors
Errors$probability <- dnorm(Errors$measured, mean = Errors$prediction, sd = Errors$sd)
# Step 3.5: Compute the likelihood for each parameter set (the product of all individual probabilities)
prior$likelihood[i] <- prod(Errors$probability)
}
#Lmax<-prod(dnorm(x=measurements$y,mean=measurements$y,sd=measurements$sd)) #computing the maximum possible likelihood with the current sample
Lmax <- max(prior$likelihood)
prior$likelihoodRel <- prior$likelihood/Lmax # compute the relative likelihood for each parameters set
prior$Accept <- FALSE
prior$Accept[ ( runif(nrow(prior)) < prior$likelihoodRel )]<-TRUE # create a random number between 1 and 0 for each parameter set, and accept it if the random number is smaller than the relative likelihood
posteriorAR <- prior[prior$Accept,]
for(i in 1: nrow(posteriorAR)){
# Define the initial state of the system for one sample
State <- c(C = Cini)
# Define the parameters of the model
pars <- c(slope = posteriorAR$k[i])
# Run the model for the parameter set and make a data frame of the output for one sample
out <- rk4(y = State, times = time, func = LinearModel, parms = pars)
# Assign the ID of the sample to the output and join the output to the posterior data frame
OneSample <- as.data.frame(out)
colnames(OneSample) <- c("years","prediction")
OneSample$id <- i
if(i == 1){posteriorData <- OneSample}else{
posteriorData <- rbind(posteriorData,OneSample)
}
}
#plot all samples from the posterior
ggplot(measurements, aes(years, measured)) +
geom_point() +
theme_classic() +
# coord_cartesian(xlim = c(0, 4), ylim = c(0, 4))+
geom_line(data = posteriorData, aes(x = years, y = prediction, group = id),alpha=0.1, color ="blue")+
xlab("years")
posteriorAR$k
View(posteriorData)
for(i in 1: nrow(posteriorAR)){
# Define the initial state of the system for one sample
State <- c(C = Cini)
# Define the parameters of the model
pars <- c(k = posteriorAR$k[i])
# Run the model for the parameter set and make a data frame of the output for one sample
out <- rk4(y = State, times = time, func = LinearModel, parms = pars)
# Assign the ID of the sample to the output and join the output to the posterior data frame
OneSample <- as.data.frame(out)
colnames(OneSample) <- c("years","prediction")
OneSample$id <- i
if(i == 1){posteriorData <- OneSample}else{
posteriorData <- rbind(posteriorData,OneSample)
}
}
#plot all samples from the posterior
ggplot(measurements, aes(years, measured)) +
geom_point() +
theme_classic() +
# coord_cartesian(xlim = c(0, 4), ylim = c(0, 4))+
geom_line(data = posteriorData, aes(x = years, y = prediction, group = id),alpha=0.1, color ="blue")+
xlab("years")
#plot all samples from the posterior
ggplot(measurements, aes(years, measured)) +
geom_point() +
theme_classic() +
coord_cartesian(xlim = c(0, 4), ylim = c(0, 4))+
geom_line(data = posteriorData, aes(x = years, y = prediction, group = id),alpha=0.1, color ="blue")+
xlab("years")
#plot all samples from the posterior
ggplot(measurements, aes(years, measured)) +
geom_point() +
theme_classic() +
#coord_cartesian(xlim = c(0, 4), ylim = c(0, 4))+
geom_line(data = posteriorData, aes(x = years, y = prediction, group = id),alpha=0.1, color ="blue")+
xlab("years")
#plot all samples from the posterior
ggplot(measurements, aes(years, measured)) +
theme_classic() +
#coord_cartesian(xlim = c(0, 4), ylim = c(0, 4))+
geom_line(data = posteriorData, aes(x = years, y = prediction, group = id),alpha=0.1, color ="blue")+
geom_point() +
xlab("years")
source("~/GitHub/Modeling_yield/Scripts/DVS_calculation.R", echo=TRUE)
# Prepare the data ----
# Set working directory
setwd("~/GitHub/Modeling_yield")
# Remove the year 2025
DVS_weather <- DVS_weather %>%
filter(Season_ID != 2025)
# Visualize the development stages
ggplot(data = DVS_weather, aes(x = Date, y = DVS_stage, color = ID)) +
geom_line() +
labs(title = "Development Stages (DVS) Over Time",
x = "Date",
y = "Development Stage (DVS)") +
theme_minimal() +
theme(legend.position = "none") # Remove legend for clarity
# Remove the year 2025
DVS_weather <- DVS_weather %>%
filter(Season_ID != 2024)
# Visualize the development stages
ggplot(data = DVS_weather, aes(x = Date, y = DVS_stage, color = ID)) +
geom_line() +
labs(title = "Development Stages (DVS) Over Time",
x = "Date",
y = "Development Stage (DVS)") +
theme_minimal() +
theme(legend.position = "none") # Remove legend for clarity
# Visualize the development stages
ggplot(data = DVS_weather, aes(x = Date, y = DVS_stage, color = ID)) +
geom_line() +
labs(title = "Development Stages (DVS) Over Time",
x = "Date",
y = "Development Stage (DVS)") +
scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") +
theme_minimal() +
theme(legend.position = "none") # Remove legend for clarity
ggThemeAssist:::ggThemeAssistAddin()
# Visualize the development stages
ggplot(data = DVS_weather, aes(x = Date, y = DVS_stage, color = ID)) +
geom_line() +
labs(title = "Development Stages (DVS) Over Time",
x = "Date",
y = "Development Stage (DVS)") +
scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") +
theme_minimal() +
theme(legend.position = "none")  +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
axis.text.x = element_text(vjust = 0.35, angle = 15),
plot.title = element_text(size = 15))# Remove legend for clarity
# Visualize the development stages
ggplot(data = DVS_weather, aes(x = Date, y = DVS_stage, color = ID)) +
geom_line() +
labs(title = "Development Stages (DVS) Over Time",
x = "Date",
y = "Development Stage (DVS)") +
scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + # Show date each 3 months, starting from October
theme_minimal() +
theme(legend.position = "none")  +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
axis.text.x = element_text(vjust = 0.35, angle = 15),
plot.title = element_text(size = 15), # Remove legend for clarity
plot.margin = margin(10, 10, 10, 10))
# Visualize the development stages
ggplot(data = DVS_weather, aes(x = Date, y = DVS_stage, color = ID)) +
geom_line() +
labs(title = "Development Stages (DVS) Over Time",
x = "Date",
y = "Development Stage (DVS)") +
scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + # Show date each 3 months, starting from October
theme_minimal() +
theme(legend.position = "none")  +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
axis.text.x = element_text(vjust = 0.35, angle = 15),
plot.title = element_text(size = 15), # Remove legend for clarity
plot.margin = margin(10, 10, 10, 20))
# Visualize the development stages
ggplot(data = DVS_weather, aes(x = Date, y = DVS_stage, color = ID)) +
geom_line() +
labs(title = "Development Stages (DVS) Over Time",
x = "Date",
y = "Development Stage (DVS)") +
scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + # Show date each 3 months, starting from October
theme_minimal() +
theme(legend.position = "none")  +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
axis.text.x = element_text(vjust = 0.35, angle = 15),
plot.title = element_text(size = 15), # Remove legend for clarity
plot.margin = margin(10, 10, 20, 10))
# Visualize the development stages
ggplot(data = DVS_weather, aes(x = Date, y = DVS_stage, color = ID)) +
geom_line() +
labs(title = "Development Stages (DVS) Over Time",
x = "Date",
y = "Development Stage (DVS)") +
scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + # Show date each 3 months, starting from October
theme_minimal() +
theme(legend.position = "none")  +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
axis.text.x = element_text(vjust = 0.35, angle = 15),
plot.title = element_text(size = 15), # Remove legend for clarity
plot.margin = margin(10, 20, 10, 10))
# Visualize the development stages
ggplot(data = DVS_weather, aes(x = Date, y = DVS_stage, color = ID)) +
geom_line() +
labs(title = "Development Stages (DVS) Over Time",
x = "Date",
y = "Development Stage (DVS)") +
scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") + # Show date each 3 months, starting from October
theme_minimal() +
theme(legend.position = "none")  +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
axis.text.x = element_text(vjust = 0.35, angle = 15),
plot.title = element_text(size = 15), # Remove legend for clarity
plot.margin = margin(10, 22, 10, 10))
# Export the plot
ggsave("Output/DVS_plot.png", width = 10, height = 6, dpi = 300)
# Import the csvs as data frames
biomass_files <- list.files(path = "Output", pattern = "biomass_production_", full.names = TRUE)
biomass_data <- lapply(biomass_files, read.csv)
# Extract final WSO (storage organ biomass) for each file
yield_data <- data.frame(
File = basename(biomass_files),
Unique_ID = NA,
Season_ID = NA,
Final_WSO_kg_ha = NA
)
for (i in seq_along(biomass_data)) {
df <- biomass_data[[i]]
# Extract final WSO
final_WSO <- sum(df$WSO)  # kg/ha
# Extract pixel and season info from filename
file_parts <- unlist(strsplit(gsub("biomass_production_|\\.csv", "", yield_data$File[i]), "_"))
yield_data$Unique_ID[i] <- paste(file_parts[1], file_parts[2], sep = "_")
yield_data$Season_ID[i] <- file_parts[3]
yield_data$Final_WSO_kg_ha[i] <- final_WSO
}
View(yield_data)
# Split the Unique_ID column into Longitude and Latitude
library(tidyr)
yield_data <- yield_data %>%
separate(Unique_ID, into = c("Longitude", "Latitude"), sep = "_", convert = TRUE)
str(yield_data)
head(yield_data)
View(yield_data)
View(yield_data)
write.csv(yield_data, "Output/biomass_yield.csv", row.names = FALSE)
# Plot the results ----
ggplot(test, aes(x = time)) +
geom_line(aes(y = WLV, color = "Leaf weight"), linewidth = 1.2) +
geom_line(aes(y = WST, color = "Stem weight"), linewidth = 1.2) +
geom_line(aes(y = WRT, color = "Root weight"), linewidth = 1.2) +
geom_line(aes(y = WSO, color = "Storage weight"), linewidth = 1.2) +
labs(title = "Biomass Production Over Time",
x = "Time",
y = "Weight (kg/ha)") +
scale_color_manual(values = c("Leaf weight" = "green",
"Stem weight" = "brown",
"Root weight" = "blue",
"Storage weight" = "orange",
"Yield" = "salmon")) +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
test <- biomass_data[[2]]
# Plot the results ----
ggplot(test, aes(x = time)) +
geom_line(aes(y = WLV, color = "Leaf weight"), linewidth = 1.2) +
geom_line(aes(y = WST, color = "Stem weight"), linewidth = 1.2) +
geom_line(aes(y = WRT, color = "Root weight"), linewidth = 1.2) +
geom_line(aes(y = WSO, color = "Storage weight"), linewidth = 1.2) +
labs(title = "Biomass Production Over Time",
x = "Time",
y = "Weight (kg/ha)") +
scale_color_manual(values = c("Leaf weight" = "green",
"Stem weight" = "brown",
"Root weight" = "blue",
"Storage weight" = "orange",
"Yield" = "salmon")) +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
