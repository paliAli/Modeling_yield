coord_cartesian(xlim = c(0, 4), ylim = c(0, 4))+
geom_line(data = posteriorData, aes(x = years, y = prediction, group = id),alpha=0.1, color ="blue")+
xlab("years")
#plot all samples from the posterior
ggplot(measurements, aes(years, measured)) +
geom_point() +
theme_classic() +
#coord_cartesian(xlim = c(0, 4), ylim = c(0, 4))+
geom_line(data = posteriorData, aes(x = years, y = prediction, group = id),alpha=0.1, color ="blue")+
xlab("years")
#plot all samples from the posterior
ggplot(measurements, aes(years, measured)) +
theme_classic() +
#coord_cartesian(xlim = c(0, 4), ylim = c(0, 4))+
geom_line(data = posteriorData, aes(x = years, y = prediction, group = id),alpha=0.1, color ="blue")+
geom_point() +
xlab("years")
setwd("~/GitHub/Modeling_yield")
# Import the weather data ----
source("Scripts/DVS_calculation.R")
# Import the csvs as data frames
biomass_files <- list.files(path = "Output", pattern = "biomass_production_", full.names = TRUE)
biomass_data <- lapply(biomass_files, read.csv)
# Extract final WSO (storage organ biomass) for each file
yield_data <- data.frame(
File = basename(biomass_files),
Unique_ID = NA,
Season_ID = NA,
Final_WSO_kg_ha = NA
)
View(yield_data)
for (i in seq_along(biomass_data)) {
df <- biomass_data[[i]]
# Extract final WSO
final_WSO <- tail(df$WSO, 1)  # kg/ha
# Extract pixel and season info from filename
file_parts <- unlist(strsplit(gsub("biomass_production_|\\.csv", "", yield_data$File[i]), "_"))
yield_data$Unique_ID[i] <- file_parts[1]
yield_data$Season_ID[i] <- file_parts[2]
yield_data$Final_WSO_kg_ha[i] <- final_WSO
}
View(yield_data)
for (i in seq_along(biomass_data)) {
df <- biomass_data[[i]]
# Extract final WSO
final_WSO <- tail(df$WSO, 1)  # kg/ha
# Extract pixel and season info from filename
file_parts <- unlist(strsplit(gsub("biomass_production_|\\.csv", "", yield_data$File[i]), "_"))
yield_data$Unique_ID[i] <- file_parts[1,2]
yield_data$Season_ID[i] <- file_parts[3]
yield_data$Final_WSO_kg_ha[i] <- final_WSO
}
for (i in seq_along(biomass_data)) {
df <- biomass_data[[i]]
# Extract final WSO
final_WSO <- tail(df$WSO, 1)  # kg/ha
# Extract pixel and season info from filename
file_parts <- unlist(strsplit(gsub("biomass_production_|\\.csv", "", yield_data$File[i]), "_"))
yield_data$Unique_ID[i] <- paste(file_parts[1], file_parts[2], sep = "_")
yield_data$Season_ID[i] <- file_parts[3]
yield_data$Final_WSO_kg_ha[i] <- final_WSO
}
View(yield_data)
View(biomass_data)
View(biomass_data)
biomass_data[[4]][["WSO"]]
biomass_data[[3]][["WSO"]]
test <- biomass_data[[4]]
# Plot the results ----
ggplot(test, aes(x = time)) +
geom_line(aes(y = WLV, color = "Leaf weight"), linewidth = 1.2) +
geom_line(aes(y = WST, color = "Stem weight"), linewidth = 1.2) +
geom_line(aes(y = WRT, color = "Root weight"), linewidth = 1.2) +
geom_line(aes(y = WSO, color = "Storage weight"), linewidth = 1.2) +
geom_line(aes(y = WSO.WSO, color = "Yield")) +
labs(title = "Biomass Production Over Time",
x = "Time",
y = "Weight (kg/ha)") +
scale_color_manual(values = c("Leaf weight" = "green",
"Stem weight" = "brown",
"Root weight" = "blue",
"Storage weight" = "orange",
"Yield" = "salmon")) +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
View(yield_data)
View(df)
View(test)
test <- biomass_data[[3]]
View(test)
# Extract final WSO (storage organ biomass) for each file
yield_data <- data.frame(
File = basename(biomass_files),
Unique_ID = NA,
Season_ID = NA,
Final_WSO_g_m2 = NA
)
for (i in seq_along(biomass_data)) {
df <- biomass_data[[i]]
# Extract final WSO
final_WSO <- tail(df$WSO, 1)  # kg/ha
# Extract pixel and season info from filename
file_parts <- unlist(strsplit(gsub("biomass_production_|\\.csv", "", yield_data$File[i]), "_"))
yield_data$Unique_ID[i] <- paste(file_parts[1], file_parts[2], sep = "_")
yield_data$Season_ID[i] <- file_parts[3]
yield_data$Final_WSO_kg_ha[i] <- final_WSO
}
View(test)
# Extract final WSO (storage organ biomass) for each file
yield_data <- data.frame(
File = basename(biomass_files),
Unique_ID = NA,
Season_ID = NA,
Final_WSO_g_m2 = NA
)
for (i in seq_along(biomass_data)) {
df <- biomass_data[[i]]
# Extract final WSO
final_WSO <- sum(df$WSO)  # g/m2
# Extract pixel and season info from filename
file_parts <- unlist(strsplit(gsub("biomass_production_|\\.csv", "", yield_data$File[i]), "_"))
yield_data$Unique_ID[i] <- paste(file_parts[1], file_parts[2], sep = "_")
yield_data$Season_ID[i] <- file_parts[3]
yield_data$Final_WSO_kg_ha[i] <- final_WSO
}
# Extract final WSO (storage organ biomass) for each file
yield_data <- data.frame(
File = basename(biomass_files),
Unique_ID = NA,
Season_ID = NA,
Final_WSO_g_m2 = NA
)
View(test)
for (i in seq_along(biomass_data)) {
df <- biomass_data[[i]]
# Extract final WSO
final_WSO <- sum(df$WSO)  # g/m2
# Extract pixel and season info from filename
file_parts <- unlist(strsplit(gsub("biomass_production_|\\.csv", "", yield_data$File[i]), "_"))
yield_data$Unique_ID[i] <- paste(file_parts[1], file_parts[2], sep = "_")
yield_data$Season_ID[i] <- file_parts[3]
yield_data$Final_WSO_kg_ha[i] <- final_WSO
}
# Extract final WSO (storage organ biomass) for each file
yield_data <- data.frame(
File = basename(biomass_files),
Unique_ID = NA,
Season_ID = NA,
Final_WSO_g_m2 = NA
)
for (i in seq_along(biomass_data)) {
df <- biomass_data[[i]]
# Extract final WSO
final_WSO <- sum(df$WSO)  # g/m2
# Extract pixel and season info from filename
file_parts <- unlist(strsplit(gsub("biomass_production_|\\.csv", "", yield_data$File[i]), "_"))
yield_data$Unique_ID[i] <- paste(file_parts[1], file_parts[2], sep = "_")
yield_data$Season_ID[i] <- file_parts[3]
yield_data$Final_WSO_g_m2[i] <- final_WSO
}
# Import the biomass model function
source("Input_data/Biomass_function.R")
# Initial states ----
initial_leaf_weight <- 0.1
initial_stem_weight <- 0.1
initial_root_weight <- 0.1
initial_storage_weight <- 0
initial_LAI <- 0.1
state <- c(WLV = initial_leaf_weight,
WST = initial_stem_weight,
WRT = initial_root_weight,
WSO = initial_storage_weight,
LAI = initial_LAI)
any(is.na(DVS_weather))
which(is.na(DVS_weather))
# Remove NAs from the weather dataset
DVS_weather <- DVS_weather[complete.cases(DVS_weather), ]
# Import the event function
source("Input_data/Event_function.R")
# Define the root function
rootfun <- function(t, state, parms) {
with(as.list(state), {
# Access DVS_stage from parms
current_DVS <- parms$DVS_stage[t]
current_DVS - 2  # Root is found when DVS = 2
})
}
# Run the model for each location ----
# Loop the ode function through each coordinate
for (i in 1:length(Unique_ID)) {
weather_subset <- DVS_weather[DVS_weather$ID == Unique_ID[i],]
# Find unique seasons (Season_ID) for the current coordinate
season_IDs <- unique(weather_subset$Season_ID)
# Loop the ode function through each growing season
for (sowing_year in season_IDs) {
# Select the rows in the sowing_year
weather_subset_filtered <- weather_subset[weather_subset$Season_ID == sowing_year, ]
# Define the timestep
timestep <- 1 # Each day
# Define the number of time steps
num_steps <- nrow(weather_subset_filtered) # Number of observed days
# Define the time points for the ODE solver
times <- seq(1, num_steps, by = timestep)
# Run the ODE solver with events
out <- ode(y = state, times = times, func = crop_growth, parms = crop,
events = list(func = eventfun, time = times), rootfun = rootfun)
# Convert output to a data frame
out_df <- as.data.frame(out)
# Save the output
write.csv(out_df, paste0("Output/biomass_production_", Unique_ID[i], "_", sowing_year, ".csv"), row.names = FALSE)
}
}
# Required libraries ----
library(deSolve)
# Run the model for each location ----
# Loop the ode function through each coordinate
for (i in 1:length(Unique_ID)) {
weather_subset <- DVS_weather[DVS_weather$ID == Unique_ID[i],]
# Find unique seasons (Season_ID) for the current coordinate
season_IDs <- unique(weather_subset$Season_ID)
# Loop the ode function through each growing season
for (sowing_year in season_IDs) {
# Select the rows in the sowing_year
weather_subset_filtered <- weather_subset[weather_subset$Season_ID == sowing_year, ]
# Define the timestep
timestep <- 1 # Each day
# Define the number of time steps
num_steps <- nrow(weather_subset_filtered) # Number of observed days
# Define the time points for the ODE solver
times <- seq(1, num_steps, by = timestep)
# Run the ODE solver with events
out <- ode(y = state, times = times, func = crop_growth, parms = crop,
events = list(func = eventfun, time = times), rootfun = rootfun)
# Convert output to a data frame
out_df <- as.data.frame(out)
# Save the output
write.csv(out_df, paste0("Output/biomass_production_", Unique_ID[i], "_", sowing_year, ".csv"), row.names = FALSE)
}
}
# Import the csvs as data frames
biomass_files <- list.files(path = "Output", pattern = "biomass_production_", full.names = TRUE)
biomass_data <- lapply(biomass_files, read.csv)
View(biomass_data)
# Extract final WSO (storage organ biomass) for each file
yield_data <- data.frame(
File = basename(biomass_files),
Unique_ID = NA,
Season_ID = NA,
Final_WSO_g_m2 = NA
)
for (i in seq_along(biomass_data)) {
df <- biomass_data[[i]]
# Extract final WSO
final_WSO <- sum(df$WSO)  # g/m2
# Extract pixel and season info from filename
file_parts <- unlist(strsplit(gsub("biomass_production_|\\.csv", "", yield_data$File[i]), "_"))
yield_data$Unique_ID[i] <- paste(file_parts[1], file_parts[2], sep = "_")
yield_data$Season_ID[i] <- file_parts[3]
yield_data$Final_WSO_g_m2[i] <- final_WSO
}
test <- biomass_data[[3]]
View(test)
test <- biomass_data[[2]]
View(test)
# Plot the results ----
ggplot(test, aes(x = time)) +
geom_line(aes(y = WLV, color = "Leaf weight"), linewidth = 1.2) +
geom_line(aes(y = WST, color = "Stem weight"), linewidth = 1.2) +
geom_line(aes(y = WRT, color = "Root weight"), linewidth = 1.2) +
geom_line(aes(y = WSO, color = "Storage weight"), linewidth = 1.2) +
geom_line(aes(y = WSO.WSO, color = "Yield")) +
labs(title = "Biomass Production Over Time",
x = "Time",
y = "Weight (kg/ha)") +
scale_color_manual(values = c("Leaf weight" = "green",
"Stem weight" = "brown",
"Root weight" = "blue",
"Storage weight" = "orange",
"Yield" = "salmon")) +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
# Plot the results ----
ggplot(test, aes(x = time)) +
geom_line(aes(y = WLV, color = "Leaf weight"), linewidth = 1.2) +
geom_line(aes(y = WST, color = "Stem weight"), linewidth = 1.2) +
geom_line(aes(y = WRT, color = "Root weight"), linewidth = 1.2) +
geom_line(aes(y = WSO, color = "Storage weight"), linewidth = 1.2) +
geom_line(aes(y = sum(WSO), color = "Yield")) +
labs(title = "Biomass Production Over Time",
x = "Time",
y = "Weight (kg/ha)") +
scale_color_manual(values = c("Leaf weight" = "green",
"Stem weight" = "brown",
"Root weight" = "blue",
"Storage weight" = "orange",
"Yield" = "salmon")) +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
# Plot the results ----
ggplot(test, aes(x = time)) +
geom_line(aes(y = WLV, color = "Leaf weight"), linewidth = 1.2) +
geom_line(aes(y = WST, color = "Stem weight"), linewidth = 1.2) +
geom_line(aes(y = WRT, color = "Root weight"), linewidth = 1.2) +
geom_line(aes(y = WSO, color = "Storage weight"), linewidth = 1.2) +
labs(title = "Biomass Production Over Time",
x = "Time",
y = "Weight (kg/ha)") +
scale_color_manual(values = c("Leaf weight" = "green",
"Stem weight" = "brown",
"Root weight" = "blue",
"Storage weight" = "orange",
"Yield" = "salmon")) +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
# Extract final WSO (storage organ biomass) for each file
yield_data <- data.frame(
File = basename(biomass_files),
Unique_ID = NA,
Season_ID = NA,
Final_WSO_kg_ha = NA
)
for (i in seq_along(biomass_data)) {
df <- biomass_data[[i]]
# Extract final WSO
final_WSO <- sum(df$WSO)  # kg/ha
# Extract pixel and season info from filename
file_parts <- unlist(strsplit(gsub("biomass_production_|\\.csv", "", yield_data$File[i]), "_"))
yield_data$Unique_ID[i] <- paste(file_parts[1], file_parts[2], sep = "_")
yield_data$Season_ID[i] <- file_parts[3]
yield_data$Final_WSO_kg_ha[i] <- final_WSO
}
map=raster("Input_data/aggregated_landcover_raster_1x1km.tif")
res(map)
crs(map)
library(readxl)
library(ggplot2)
library(ggthemes)
library(viridis)
#library(maptools)
library(ggpubr)
library(raster)
library(rgdal)
res(map)
crs(map)
plot(map)
# Define the aggregation factor (from 100m to 1km)
agg_factor <- 50
# Aggregate the raster using the modal function
aggregated_raster <- aggregate(map, fact = agg_factor, fun = modal)
# Save the aggregated raster
writeRaster(aggregated_raster, "Input_data/aggregated_landcover_raster_50x50km.tif", format = "GTiff")
# Plot the aggregated raster
plot(aggregated_raster)
# Check the resolution of the resampled raster
res(aggregated_raster)
crs(aggregated_raster)
map=raster("Input_data/aggregated_landcover_raster_1x1km.tif")
res(map)
crs(map)
plot(map)
# Define the aggregation factor (from 100m to 1km)
agg_factor <- 50
# Aggregate the raster using the modal function
aggregated_raster <- aggregate(map, fact = agg_factor, fun = modal)
# Save the aggregated raster
writeRaster(aggregated_raster, "Input_data/aggregated_landcover_raster_50x50km.tif", format = "GTiff")
# Plot the aggregated raster
plot(aggregated_raster)
# Check the resolution of the resampled raster
res(aggregated_raster)
crs(aggregated_raster)
# Create a data frame with the aggregated raster values
df <- as.data.frame(aggregated_raster, xy = TRUE)
str(df)
unique(df$aggregated_landcover_raster_1x1km)
Wanted_Points<-df[df[,3] %in% c(12),]
plot(Wanted_Points$y~Wanted_Points$x, pch=20, col="red", xlab="X", ylab="Y", main="Wanted Points")
str(Wanted_Points)
View(Wanted_Points)
View(Wanted_Points)
View(Wanted_Points)
# Convert the coordinates from the raster CRS to geographic coordinates (WGS84) ----
# Define the source and target CRS
source_crs <- "+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs"
target_crs <- "+proj=longlat +datum=WGS84 +no_defs"
# Create a spatial object from the Wanted_Points data frame
coordinates(Wanted_Points) <- ~x + y
proj4string(Wanted_Points) <- source_crs
# Transform the coordinates to the target CRS (WGS84)
Wanted_Points_transformed <- spTransform(Wanted_Points, target_crs)
# Extract the transformed coordinates and add them back to the data frame
Wanted_Points$Longitude <- coordinates(Wanted_Points_transformed)[, 1]
Wanted_Points$Latitude <- coordinates(Wanted_Points_transformed)[, 2]
# Inspect the updated data frame
head(Wanted_Points)
# Plot the transformed points
plot(Wanted_Points$Latitude ~ Wanted_Points$Longitude,
pch = 20, col = "blue",
xlab = "Longitude", ylab = "Latitude",
main = "Wanted Points in WGS84")
View(Wanted_Points_transformed)
View(Wanted_Points)
plot(Wanted_Points$y~Wanted_Points$x, pch=20, col="red", xlab="X", ylab="Y", main="Wanted Points")
# Plot the transformed points
plot(Wanted_Points$Latitude ~ Wanted_Points$Longitude,
pch = 20, col = "blue",
xlab = "Longitude", ylab = "Latitude",
main = "Wanted Points in WGS84")
# Inspect the updated data frame
tail(Wanted_Points)
# Inspect the updated data frame
head(Wanted_Points, 50)
# Aggregate the raster using the modal function
aggregated_raster <- aggregate(map, fact = agg_factor, fun = modal)
# Plot the aggregated raster
plot(aggregated_raster)
str(yield_data)
# Import the csvs as data frames
biomass_files <- list.files(path = "Output", pattern = "biomass_production_", full.names = TRUE)
biomass_data <- lapply(biomass_files, read.csv)
# Extract final WSO (storage organ biomass) for each file
yield_data <- data.frame(
File = basename(biomass_files),
Unique_ID = NA,
Season_ID = NA,
Final_WSO_kg_ha = NA
)
for (i in seq_along(biomass_data)) {
df <- biomass_data[[i]]
# Extract final WSO
final_WSO <- sum(df$WSO)  # kg/ha
# Extract pixel and season info from filename
file_parts <- unlist(strsplit(gsub("biomass_production_|\\.csv", "", yield_data$File[i]), "_"))
yield_data$Unique_ID[i] <- paste(file_parts[1], file_parts[2], sep = "_")
yield_data$Season_ID[i] <- file_parts[3]
yield_data$Final_WSO_kg_ha[i] <- final_WSO
}
str(yield_data)
# Extract final WSO (storage organ biomass) for each file
yield_data <- data.frame(
File = basename(biomass_files),
Unique_ID = NA,
Season_ID = NA,
Final_WSO_kg_ha = NA
)
for (i in seq_along(biomass_data)) {
df <- biomass_data[[i]]
# Extract final WSO
final_WSO <- sum(df$WSO)  # kg/ha
# Extract pixel and season info from filename
file_parts <- unlist(strsplit(gsub("biomass_production_|\\.csv", "", yield_data$File[i]), "_"))
yield_data$Unique_ID[i] <- paste(file_parts[1], file_parts[2], sep = "_")
yield_data$Season_ID[i] <- file_parts[3]
yield_data$Final_WSO_kg_ha[i] <- final_WSO
# Split the Unique_ID column into Longitude and Latitude
yield_data <- yield_data %>%
separate(Unique_ID, into = c("Longitude", "Latitude"), sep = "_", convert = TRUE)
}
# Extract final WSO (storage organ biomass) for each file
yield_data <- data.frame(
File = basename(biomass_files),
Unique_ID = NA,
Season_ID = NA,
Final_WSO_kg_ha = NA
)
for (i in seq_along(biomass_data)) {
df <- biomass_data[[i]]
# Extract final WSO
final_WSO <- sum(df$WSO)  # kg/ha
# Extract pixel and season info from filename
file_parts <- unlist(strsplit(gsub("biomass_production_|\\.csv", "", yield_data$File[i]), "_"))
yield_data$Unique_ID[i] <- paste(file_parts[1], file_parts[2], sep = "_")
yield_data$Season_ID[i] <- file_parts[3]
yield_data$Final_WSO_kg_ha[i] <- final_WSO
}
# Split the Unique_ID column into Longitude and Latitude
yield_data <- yield_data %>%
separate(Unique_ID, into = c("Longitude", "Latitude"), sep = "_", convert = TRUE)
library(dplyr)
# Split the Unique_ID column into Longitude and Latitude
yield_data <- yield_data %>%
separate(Unique_ID, into = c("Longitude", "Latitude"), sep = "_", convert = TRUE)
library(tidyr)
# Split the Unique_ID column into Longitude and Latitude
yield_data <- yield_data %>%
separate(Unique_ID, into = c("Longitude", "Latitude"), sep = "_", convert = TRUE)
# Extract final WSO (storage organ biomass) for each file
yield_data <- data.frame(
File = basename(biomass_files),
Unique_ID = NA,
Season_ID = NA,
Final_WSO_kg_ha = NA
)
for (i in seq_along(biomass_data)) {
df <- biomass_data[[i]]
# Extract final WSO
final_WSO <- sum(df$WSO)  # kg/ha
# Extract pixel and season info from filename
file_parts <- unlist(strsplit(gsub("biomass_production_|\\.csv", "", yield_data$File[i]), "_"))
yield_data$Unique_ID[i] <- paste(file_parts[1], file_parts[2], sep = "_")
yield_data$Season_ID[i] <- file_parts[3]
yield_data$Final_WSO_kg_ha[i] <- final_WSO
}
# Split the Unique_ID column into Longitude and Latitude
library(tidyr)
yield_data <- yield_data %>%
separate(Unique_ID, into = c("Longitude", "Latitude"), sep = "_", convert = TRUE)
str(yield_data)
