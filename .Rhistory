dLAI <- min(RGRLAI * LAI_now, SLA * dWLV) # SLA = specific leaf area in ha/kg
return(list(
c(dWLV, dWST, dWRT, dWSO, dLAI),
Rd = Rd,
RN = RN,
DVS = DVS_now
))
})
}
# Run the model ----
out <- ode(y = state, times = times, func = crop_growth, parms = crop)
View(FLTB_df)
# Load in crop data
source("Input_data/crop_data.R")
# Define crop TSUM thresholds ----
TSUM_stages <- c(crop$TSUMEM,crop$TSUMEM + crop$TSUM1, crop$TSUMEM + crop$TSUM1 + crop$TSUM2) # Cumulative TSUM values
DVS_stages <- c(0, 1, 2) # Corresponding development stages
# Import the weather data
weather <- read.csv("Input_data/Europe_weather_data_test.csv")
weather <- weather[weather$YEAR == "2024",]
# Compute TSUM and DVS for each location
DVS_weather <- weather %>%
group_by(LON, LAT) %>%
arrange(Date) %>%
mutate(
TSUM = cumsum(Tmean), # calculate cumulative sum of temperatures
DVS_stage = approx(x = TSUM_stages, y = DVS_stages, xout = TSUM, rule = 2)$y # Interpolate DVS
) %>%
ungroup()
View(DVS_weather)
# Create a identifier column for the weather
DVS_weather$ID <- paste0(DVS_weather$LON, "_", DVS_weather$LAT)
Unique_ID <- unique(DVS_weather$ID)
weather_subset <- DVS_weather[DVS_weather$ID == Unique_ID[1],]
View(weather_subset)
# Initial states ----
initial_leaf_weight <- 0.1
initial_stem_weight <- 0.1
initial_root_weight <- 0.1
initial_storage_weight <- 0
initial_LAI <- 0.1
state <- c(WLV = initial_leaf_weight,
WST = initial_stem_weight,
WRT = initial_root_weight,
WSO = initial_storage_weight,
LAI = initial_LAI)
any(is.na(weather_subset))
which(is.na(weather_subset))
# Remove NAs from the weather dataset
weather_subset <- weather_subset[complete.cases(weather_subset), ]
any(is.na(weather_subset))
# Define the time step
time_step <- 1 # in days
# Define the number of time steps
num_steps <- nrow(weather_subset) # Number of observed days
times <- seq(1, num_steps, by = time_step) # Time vector
# Define the model ----
crop_growth <- function(t, state, parameters){
with(as.list(c(state, crop)),{
# Get current weather values
day <- floor(t)
Tmean <- weather_subset$Tmean[day]
SR <- weather_subset$Solar[day]
DVS_now <- weather_subset$DVS_stage[day]
LAI_now <- state["LAI"]
if (any(is.na(c(Tmean, SR, DVS_now, LAI_now)))) {
stop("NA values in weather data or state vector")
}
# Calculate required variables
# Convert total radiation to PAR
PAR <- 0.5 * SR  # About 50% of incoming radiation is PAR (Photosynthetically Active Radiation)
# Intercepted PAR using Beer’s Law
fPAR <- 1 - exp(-k * LAI_now)  # k = light extinction coefficient
# Simplified calculation of photosynthesis
Rd <- Ce * PAR * fPAR # gross assimilation in kg/ha/day
# Maintenance respiration
RM_25 <- WLV*RML + WST*RMS + WRT*RMR + WSO*RMO
RM <- RM_25 * Q10^((Tmean - 25)/10) # maintenance respiration in kg/ha/day
# Net biomass assimilation
if (RM > Rd) {
RM <- Rd # The maintenance respiration cannot exceed the gross assimilation
}
RN <- Rd - RM # net assimilation in kg/ha/day
print(paste("Rd:", Rd, "RM:", RM, "RN:", RN))
if (is.na(RN)) {
stop("RN is NA. Check Rd and RM.")
}
# Partitioning (interpolated from tables based on DVS)
FL <- approx(FLTB_df$DVS, FLTB_df$Value, xout = DVS_now, rule = 2)$y
FS <- approx(FSTB_df$DVS, FSTB_df$Value, xout = DVS_now, rule = 2)$y
FR <- approx(FRTB_df$DVS, FRTB_df$Value, xout = DVS_now, rule = 2)$y
FO <- approx(FOTB_df$DVS, FOTB_df$Value, xout = DVS_now, rule = 2)$y
# Biomass growth
dWLV <- RN * FL #* CVL I would use this if I want to calculate carbon content (?)
dWST <- RN * FS #* CVS
dWRT <- RN * FR #* CVR
dWSO <- RN * FO #* CVO
# LAI growth (based on SLA and max relative rate)
dLAI <- min(RGRLAI * LAI_now, SLA * dWLV) # SLA = specific leaf area in ha/kg
return(list(
c(dWLV, dWST, dWRT, dWSO, dLAI),
Rd = Rd,
RN = RN,
DVS = DVS_now
))
})
}
# Run the model ----
out <- ode(y = state, times = times, func = crop_growth, parms = crop)
# Convert the output to a data frame
out_df <- as.data.frame(out)
# Plot the results ----
ggplot(out_df, aes(x = time)) +
geom_line(aes(y = WLV, color = "Leaf weight"), linewidth = 1.2) +
geom_line(aes(y = WST, color = "Stem weight"), linewidth = 1.2) +
geom_line(aes(y = WRT, color = "Root weight"), linewidth = 1.2) +
geom_line(aes(y = WSO, color = "Storage weight"), linewidth = 1.2) +
labs(title = "Biomass Production Over Time",
x = "Time",
y = "Weight (kg/ha)") +
scale_color_manual(values = c("Leaf weight" = "green",
"Stem weight" = "brown",
"Root weight" = "blue",
"Storage weight" = "orange")) +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
# Only plot LAI
ggplot(out_df, aes(x = time, y = LAI)) +
geom_line(color = "purple", linewidth = 1.2) +
labs(title = "Leaf Area Index (LAI) Over Time",
x = "Time",
y = "LAI") +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
# Plot the results ----
ggplot(out_df, aes(x = time)) +
geom_line(aes(y = WLV, color = "Leaf weight"), linewidth = 1.2) +
geom_line(aes(y = WST, color = "Stem weight"), linewidth = 1.2) +
geom_line(aes(y = WRT, color = "Root weight"), linewidth = 1.2) +
geom_line(aes(y = WSO, color = "Storage weight"), linewidth = 1.2) +
labs(title = "Biomass Production Over Time",
x = "Time",
y = "Weight (kg/ha)") +
scale_color_manual(values = c("Leaf weight" = "green",
"Stem weight" = "brown",
"Root weight" = "blue",
"Storage weight" = "orange")) +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
# Create a subset for each unique ID
# Create a subset for each unique ID
for (i in 1:length(Unique_ID)) {
assign(paste0("weather_subset_", i), DVS_weather[DVS_weather$ID == Unique_ID[i],])
}
# Import the weather data ----
source("Input_data/weather_data2223.R")
# Import the weather data ----
source("Input_data/weather_data_2223.R")
# Load in crop data
source("Input_data/crop_data.R")
# Import the weather data ----
source("Input_data/weather_data_2223.R")
# Import the weather data ----
source("Input_data/weather_data_2223.R")
# Import the weather data ----
source("Scripts/DVS_calculation.R")
# Define crop TSUM thresholds ----
TSUM_stages <- c(crop$TSUMEM,crop$TSUMEM + crop$TSUM1, crop$TSUMEM + crop$TSUM1 + crop$TSUM2) # Cumulative TSUM values
DVS_stages <- c(0, 1, 2) # Corresponding development stages
# Import the weather data
weather <- read.csv("Input_data/Europe_weather_data_test.csv")
weather <- weather[weather$YEAR == "2024",]
# Compute TSUM and DVS for each location
DVS_weather <- weather %>%
group_by(LON, LAT) %>%
arrange(Date) %>%
mutate(
TSUM = cumsum(Tmean), # calculate cumulative sum of temperatures
DVS_stage = approx(x = TSUM_stages, y = DVS_stages, xout = TSUM, rule = 2)$y # Interpolate DVS
) %>%
ungroup()
# Create a identifier column for the weather
DVS_weather$ID <- paste0(DVS_weather$LON, "_", DVS_weather$LAT)
Unique_ID <- unique(DVS_weather$ID)
weather_subset <- DVS_weather[DVS_weather$ID == Unique_ID[1],]
rm("weather_subset")
# Run the model for each location ----
# Loop the ode function through each weather_subset
for(i in 1:length(Unique_ID)) {
weather_subset <- DVS_weather[DVS_weather$ID == Unique_ID[i],]
# Run the model
out <- ode(y = state, times = times, func = crop_growth, parms = crop)
# Convert the output to a data frame
out_df <- as.data.frame(out)
# Save the output to a CSV file
write.csv(out_df, paste0("Output_data/biomass_production_", Unique_ID[i], ".csv"), row.names = FALSE)
}
# Initial states ----
initial_leaf_weight <- 0.1
initial_stem_weight <- 0.1
initial_root_weight <- 0.1
initial_storage_weight <- 0
initial_LAI <- 0.1
state <- c(WLV = initial_leaf_weight,
WST = initial_stem_weight,
WRT = initial_root_weight,
WSO = initial_storage_weight,
LAI = initial_LAI)
any(is.na(weather_subset))
which(is.na(weather_subset))
# Remove NAs from the weather dataset
weather_subset <- weather_subset[complete.cases(weather_subset), ]
View(DVS_weather)
rm("weather_subset")
# Initial states ----
initial_leaf_weight <- 0.1
initial_stem_weight <- 0.1
initial_root_weight <- 0.1
initial_storage_weight <- 0
initial_LAI <- 0.1
state <- c(WLV = initial_leaf_weight,
WST = initial_stem_weight,
WRT = initial_root_weight,
WSO = initial_storage_weight,
LAI = initial_LAI)
any(is.na(DVS_weather))
which(is.na(DVS_weather))
# Remove NAs from the weather dataset
DVS_weather <- DVS_weather[complete.cases(DVS_weather), ]
any(is.na(DVS_weather))
# Define the time step
time_step <- 1 # in days
# Define the number of time steps
num_steps <- nrow(DVS_weather) # Number of observed days
times <- seq(1, num_steps, by = time_step) # Time vector
# Define the model ----
crop_growth <- function(t, state, parameters){
with(as.list(c(state, crop)),{
# Get current weather values
day <- floor(t)
Tmean <- DVS_weather$Tmean[day]
SR <- DVS_weather$Solar[day]
DVS_now <- DVS_weather$DVS_stage[day]
LAI_now <- state["LAI"]
if (any(is.na(c(Tmean, SR, DVS_now, LAI_now)))) {
stop("NA values in weather data or state vector")
}
# Calculate required variables
# Convert total radiation to PAR
PAR <- 0.5 * SR  # About 50% of incoming radiation is PAR (Photosynthetically Active Radiation)
# Intercepted PAR using Beer’s Law
fPAR <- 1 - exp(-k * LAI_now)  # k = light extinction coefficient
# Simplified calculation of photosynthesis
Rd <- Ce * PAR * fPAR # gross assimilation in kg/ha/day
# Maintenance respiration
RM_25 <- WLV*RML + WST*RMS + WRT*RMR + WSO*RMO
RM <- RM_25 * Q10^((Tmean - 25)/10) # maintenance respiration in kg/ha/day
# Net biomass assimilation
if (RM > Rd) {
RM <- Rd # The maintenance respiration cannot exceed the gross assimilation
}
RN <- Rd - RM # net assimilation in kg/ha/day
print(paste("Rd:", Rd, "RM:", RM, "RN:", RN))
if (is.na(RN)) {
stop("RN is NA. Check Rd and RM.")
}
# Partitioning (interpolated from tables based on DVS)
FL <- approx(FLTB_df$DVS, FLTB_df$Value, xout = DVS_now, rule = 2)$y
FS <- approx(FSTB_df$DVS, FSTB_df$Value, xout = DVS_now, rule = 2)$y
FR <- approx(FRTB_df$DVS, FRTB_df$Value, xout = DVS_now, rule = 2)$y
FO <- approx(FOTB_df$DVS, FOTB_df$Value, xout = DVS_now, rule = 2)$y
# Biomass growth
dWLV <- RN * FL #* CVL I would use this if I want to calculate carbon content (?)
dWST <- RN * FS #* CVS
dWRT <- RN * FR #* CVR
dWSO <- RN * FO #* CVO
# LAI growth (based on SLA and max relative rate)
dLAI <- min(RGRLAI * LAI_now, SLA * dWLV) # SLA = specific leaf area in ha/kg
return(list(
c(dWLV, dWST, dWRT, dWSO, dLAI),
Rd = Rd,
RN = RN,
DVS = DVS_now
))
})
}
# Run the model for each location ----
# Loop the ode function through each weather subset
for(i in 1:length(Unique_ID)) {
weather_subset <- DVS_weather[DVS_weather$ID == Unique_ID[i],]
# Define the time step
time_step <- 1 # in days
# Define the number of time steps
num_steps <- nrow(weather_subset) # Number of observed days
times <- seq(1, num_steps, by = time_step) # Time vector
# Run the model
out <- ode(y = state, times = times, func = crop_growth, parms = crop)
# Convert the output to a data frame
out_df <- as.data.frame(out)
# Save the output to a CSV file
write.csv(out_df, paste0("Output_data/biomass_production_", Unique_ID[i], ".csv"), row.names = FALSE)
}
# Run the model for each location ----
# Loop the ode function through each weather subset
for(i in 1:length(Unique_ID)) {
weather_subset <- DVS_weather[DVS_weather$ID == Unique_ID[i],]
# Define the time step
time_step <- 1 # in days
# Define the number of time steps
num_steps <- nrow(weather_subset) # Number of observed days
times <- seq(1, num_steps, by = time_step) # Time vector
# Run the model
out <- ode(y = state, times = times, func = crop_growth, parms = crop)
# Convert the output to a data frame
out_df <- as.data.frame(out)
# Save the output to a CSV file
write.csv(out_df, paste0("Output/biomass_production_", Unique_ID[i], ".csv"), row.names = FALSE)
}
# Define the model ----
crop_growth <- function(t, state, parameters){
with(as.list(c(state, crop)),{
# Get current weather values
day <- floor(t)
Tmean <- weather_subset$Tmean[day]
SR <- weather_subset$Solar[day]
DVS_now <- weather_subset$DVS_stage[day]
LAI_now <- state["LAI"]
if (any(is.na(c(Tmean, SR, DVS_now, LAI_now)))) {
stop("NA values in weather data or state vector")
}
# Calculate required variables
# Convert total radiation to PAR
PAR <- 0.5 * SR  # About 50% of incoming radiation is PAR (Photosynthetically Active Radiation)
# Intercepted PAR using Beer’s Law
fPAR <- 1 - exp(-k * LAI_now)  # k = light extinction coefficient
# Simplified calculation of photosynthesis
Rd <- Ce * PAR * fPAR # gross assimilation in kg/ha/day
# Maintenance respiration
RM_25 <- WLV*RML + WST*RMS + WRT*RMR + WSO*RMO
RM <- RM_25 * Q10^((Tmean - 25)/10) # maintenance respiration in kg/ha/day
# Net biomass assimilation
if (RM > Rd) {
RM <- Rd # The maintenance respiration cannot exceed the gross assimilation
}
RN <- Rd - RM # net assimilation in kg/ha/day
print(paste("Rd:", Rd, "RM:", RM, "RN:", RN))
if (is.na(RN)) {
stop("RN is NA. Check Rd and RM.")
}
# Partitioning (interpolated from tables based on DVS)
FL <- approx(FLTB_df$DVS, FLTB_df$Value, xout = DVS_now, rule = 2)$y
FS <- approx(FSTB_df$DVS, FSTB_df$Value, xout = DVS_now, rule = 2)$y
FR <- approx(FRTB_df$DVS, FRTB_df$Value, xout = DVS_now, rule = 2)$y
FO <- approx(FOTB_df$DVS, FOTB_df$Value, xout = DVS_now, rule = 2)$y
# Biomass growth
dWLV <- RN * FL #* CVL I would use this if I want to calculate carbon content (?)
dWST <- RN * FS #* CVS
dWRT <- RN * FR #* CVR
dWSO <- RN * FO #* CVO
# LAI growth (based on SLA and max relative rate)
dLAI <- min(RGRLAI * LAI_now, SLA * dWLV) # SLA = specific leaf area in ha/kg
return(list(
c(dWLV, dWST, dWRT, dWSO, dLAI),
Rd = Rd,
RN = RN,
DVS = DVS_now
))
})
}
# Run the model for each location ----
# Loop the ode function through each weather subset
for(i in 1:length(Unique_ID)) {
weather_subset <- DVS_weather[DVS_weather$ID == Unique_ID[i],]
# Define the time step
time_step <- 1 # in days
# Define the number of time steps
num_steps <- nrow(weather_subset) # Number of observed days
times <- seq(1, num_steps, by = time_step) # Time vector
# Run the model
out <- ode(y = state, times = times, func = crop_growth, parms = crop)
# Convert the output to a data frame
out_df <- as.data.frame(out)
# Save the output to a CSV file
write.csv(out_df, paste0("Output/biomass_production_", Unique_ID[i], ".csv"), row.names = FALSE)
}
# Define the model ----
crop_growth <- function(t, state, parameters){
with(as.list(c(state, crop)),{
# Get current weather values
day <- floor(t)
Tmean <- weather_subset$Tmean[day]
SR <- weather_subset$Solar[day]
DVS_now <- weather_subset$DVS_stage[day]
LAI_now <- state["LAI"]
if (any(is.na(c(Tmean, SR, DVS_now, LAI_now)))) {
stop("NA values in weather data or state vector")
}
# Calculate required variables
# Convert total radiation to PAR
PAR <- 0.5 * SR  # About 50% of incoming radiation is PAR (Photosynthetically Active Radiation)
# Intercepted PAR using Beer’s Law
fPAR <- 1 - exp(-k * LAI_now)  # k = light extinction coefficient
# Simplified calculation of photosynthesis
Rd <- Ce * PAR * fPAR # gross assimilation in kg/ha/day
# Maintenance respiration
RM_25 <- WLV*RML + WST*RMS + WRT*RMR + WSO*RMO
RM <- RM_25 * Q10^((Tmean - 25)/10) # maintenance respiration in kg/ha/day
# Net biomass assimilation
if (RM > Rd) {
RM <- Rd # The maintenance respiration cannot exceed the gross assimilation
}
RN <- Rd - RM # net assimilation in kg/ha/day
print(paste("Rd:", Rd, "RM:", RM, "RN:", RN))
if (is.na(RN)) {
stop("RN is NA. Check Rd and RM.")
}
# Partitioning (interpolated from tables based on DVS)
FL <- approx(FLTB_df$DVS, FLTB_df$Value, xout = DVS_now, rule = 2)$y
FS <- approx(FSTB_df$DVS, FSTB_df$Value, xout = DVS_now, rule = 2)$y
FR <- approx(FRTB_df$DVS, FRTB_df$Value, xout = DVS_now, rule = 2)$y
FO <- approx(FOTB_df$DVS, FOTB_df$Value, xout = DVS_now, rule = 2)$y
# Biomass growth
dWLV <- RN * FL #* CVL I would use this if I want to calculate carbon content (?)
dWST <- RN * FS #* CVS
dWRT <- RN * FR #* CVR
dWSO <- RN * FO #* CVO
# LAI growth (based on SLA and max relative rate)
dLAI <- min(RGRLAI * LAI_now, SLA * dWLV) # SLA = specific leaf area in ha/kg
return(list(
c(dWLV, dWST, dWRT, dWSO, dLAI),
Rd = Rd,
RN = RN,
DVS = DVS_now
))
})
}
# Run the model for each location ----
# Loop the ode function through each weather subset
for(i in 1:length(Unique_ID)) {
weather_subset <- DVS_weather[DVS_weather$ID == Unique_ID[i],]
# Define the time step
time_step <- 1 # in days
# Define the number of time steps
num_steps <- nrow(weather_subset) # Number of observed days
times <- seq(1, num_steps, by = time_step) # Time vector
# Run the model
out <- ode(y = state, times = times, func = crop_growth, parms = crop)
# Convert the output to a data frame
out_df <- as.data.frame(out)
# Save the output to a CSV file
write.csv(out_df, paste0("Output/biomass_production_", Unique_ID[i], ".csv"), row.names = FALSE)
}
# Import the csvs as data frames
biomass_files <- list.files(path = "Output", pattern = "biomass_production_", full.names = TRUE)
biomass_data <- lapply(biomass_files, read.csv)
# Combine all data frames into one, including a unigue ID for each
biomass_data_combined <- do.call(rbind, lapply(1:length(biomass_data), function(i) {
df <- biomass_data[[i]]
df$ID <- Unique_ID[i]
return(df)
}))
View(biomass_data_combined)
rm(biomass_data_combined)
# Plot the first 5 data frames
for (i in 1:5) {
ggplot(biomass_data[[i]], aes(x = time)) +
geom_line(aes(y = WLV, color = "Leaf weight"), linewidth = 1.2) +
geom_line(aes(y = WST, color = "Stem weight"), linewidth = 1.2) +
geom_line(aes(y = WRT, color = "Root weight"), linewidth = 1.2) +
geom_line(aes(y = WSO, color = "Storage weight"), linewidth = 1.2) +
labs(title = paste("Biomass Production Over Time for", Unique_ID[i]),
x = "Time",
y = "Weight (kg/ha)") +
scale_color_manual(values = c("Leaf weight" = "green",
"Stem weight" = "brown",
"Root weight" = "blue",
"Storage weight" = "orange")) +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
}
# Plot the first 5 data frames
for (i in 1:5) {
ggplot(biomass_data[[i]], aes(x = time)) +
geom_line(aes(y = WLV, color = "Leaf weight"), linewidth = 1.2) +
geom_line(aes(y = WST, color = "Stem weight"), linewidth = 1.2) +
geom_line(aes(y = WRT, color = "Root weight"), linewidth = 1.2) +
geom_line(aes(y = WSO, color = "Storage weight"), linewidth = 1.2) +
labs(title = paste("Biomass Production Over Time for", Unique_ID[i]),
x = "Time",
y = "Weight (kg/ha)") +
scale_color_manual(values = c("Leaf weight" = "green",
"Stem weight" = "brown",
"Root weight" = "blue",
"Storage weight" = "orange")) +
theme(axis.ticks = element_line(linetype = "blank"),
axis.text.x = element_text(size = 0)) +
theme_minimal()
}
View(biomass_data)
biomass_data[[1]]
# Plot the first 5 data frames
par(mfrow = c(3, 2))
for (i in 1:5) {
plot(biomass_data[[i]]$time, biomass_data[[i]]$WLV, type = "l", col = "green", xlab = "Time", ylab = "Weight (kg/ha)", main = paste("Location", i))
lines(biomass_data[[i]]$time, biomass_data[[i]]$WST, col = "brown")
lines(biomass_data[[i]]$time, biomass_data[[i]]$WRT, col = "blue")
lines(biomass_data[[i]]$time, biomass_data[[i]]$WSO, col = "orange")
}
