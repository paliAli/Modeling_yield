# Import the weather data
weather <- read.csv("Input_data/Europe_weather_data_test.csv")
weather <- weather[weather$YEAR == "2024",]
# Compute TSUM and DVS for each location
DVS_weather <- weather %>%
group_by(LON, LAT) %>%
arrange(Date) %>%
mutate(
TSUM = cumsum(Tmean), # calculate cumulative sum of temperatures
DVS_stage = approx(x = TSUM_stages, y = DVS_stages, xout = TSUM, rule = 2)$y # Interpolate DVS
) %>%
ungroup()
# Prepare the data ----
# Set working directory
setwd("~/GitHub/Modeling_yield")
# Load in crop data
crop <- source("Input_data/crop_data.R")
# Define crop TSUM thresholds ----
TSUM_stages <- c(crop$TSUMEM,crop$TSUMEM + crop$TSUM1, crop$TSUMEM + crop$TSUM1 + crop$TSUM2) # Cumulative TSUM values
DVS_stages <- c(0, 1, 2) # Corresponding development stages
# Import the weather data
weather <- read.csv("Input_data/Europe_weather_data_test.csv")
weather <- weather[weather$YEAR == "2024",]
View(weather)
# Compute TSUM and DVS for each location
DVS_weather <- weather %>%
group_by(LON, LAT) %>%
arrange(Date) %>%
mutate(
TSUM = cumsum(Tmean), # calculate cumulative sum of temperatures
DVS_stage = approx(x = TSUM_stages, y = DVS_stages, xout = TSUM, rule = 2)$y # Interpolate DVS
) %>%
ungroup()
# Define crop TSUM thresholds ----
TSUM_stages <- c(crop$calue[[TSUMEM]], crop$value[[TSUMEM]] + crop$value[[TSUM1]], crop$value[[TSUMEM]] + crop$value[[TSUM1]] + crop$value[[TSUM2]]) # Cumulative TSUM values
View(crop)
crop <- list(
TSUMEM = 120,
TSUM1 = 1000,
TSUM2 = 950,
Tbase = 0,
DVSI = 0,
DVSEND = 2,
SLA = 0.00212,
RML = 0.030,
RMO = 0.010,
RMR = 0.0150,
RMS = 0.0150,
FLTB = c(0.000, 0.650,
0.100, 0.650,
0.250, 0.700,
0.500, 0.500,
0.646, 0.300,
0.950, 0.000,
2.000, 0.000),
FSTB = c(0.000, 0.350,
0.100, 0.350,
0.250, 0.300,
0.500, 0.500,
0.646, 0.700,
0.950, 1.000,
1.000, 0.000,
2.000, 0.000),
FRTB = c(0.000, 0.500,
0.100, 0.500,
0.200, 0.400,
0.350, 0.220,
0.400, 0.170,
0.500, 0.130,
0.700, 0.070,
0.900, 0.030,
1.200, 0.000,
2.000, 0.000),
FOTB = c(0.000, 0.000,
0.950, 0.000,
1.000, 1.000,
2.000, 1.000),
RGRLAI = 0.0082,
Q10 = 2.0,
Ce = 0.45,
k = 0.6,
CVL = 0.685,
CVO = 0.709,
CVR = 0.694,
CVS = 0.662
)
# Load in crop data
crop <- source("Input_data/crop_data.R")
crop <- list(
TSUMEM = 120,
TSUM1 = 1000,
TSUM2 = 950,
Tbase = 0,
DVSI = 0,
DVSEND = 2,
SLA = 0.00212,
RML = 0.030,
RMO = 0.010,
RMR = 0.0150,
RMS = 0.0150,
FLTB = c(0.000, 0.650,
0.100, 0.650,
0.250, 0.700,
0.500, 0.500,
0.646, 0.300,
0.950, 0.000,
2.000, 0.000),
FSTB = c(0.000, 0.350,
0.100, 0.350,
0.250, 0.300,
0.500, 0.500,
0.646, 0.700,
0.950, 1.000,
1.000, 0.000,
2.000, 0.000),
FRTB = c(0.000, 0.500,
0.100, 0.500,
0.200, 0.400,
0.350, 0.220,
0.400, 0.170,
0.500, 0.130,
0.700, 0.070,
0.900, 0.030,
1.200, 0.000,
2.000, 0.000),
FOTB = c(0.000, 0.000,
0.950, 0.000,
1.000, 1.000,
2.000, 1.000),
RGRLAI = 0.0082,
Q10 = 2.0,
Ce = 0.45,
k = 0.6,
CVL = 0.685,
CVO = 0.709,
CVR = 0.694,
CVS = 0.662
)
# Convert the partitioning coefficient into data frames
make_partition_df <- function(tbl) {
data.frame(
DVS = tbl[seq(1, length(tbl), by = 2)],
Value = tbl[seq(2, length(tbl), by = 2)]
)
}
FLTB_df <- make_partition_df(crop$FLTB)
FSTB_df <- make_partition_df(crop$FSTB)
FRTB_df <- make_partition_df(crop$FRTB)
FOTB_df <- make_partition_df(crop$FOTB)
# Define crop TSUM thresholds ----
TSUM_stages <- c(crop$TSUMEM,crop$TSUMEM + crop$TSUM1, crop$TSUMEM + crop$TSUM1 + crop$TSUM2) # Cumulative TSUM values
DVS_stages <- c(0, 1, 2) # Corresponding development stages
# Import the weather data
weather <- read.csv("Input_data/Europe_weather_data_test.csv")
weather <- weather[weather$YEAR == "2024",]
# Compute TSUM and DVS for each location
DVS_weather <- weather %>%
group_by(LON, LAT) %>%
arrange(Date) %>%
mutate(
TSUM = cumsum(Tmean), # calculate cumulative sum of temperatures
DVS_stage = approx(x = TSUM_stages, y = DVS_stages, xout = TSUM, rule = 2)$y # Interpolate DVS
) %>%
ungroup()
write.csv(DVS_weather, "Input_data/DVS_weather.csv", row.names = FALSE)
# Import the weather data ----
weather <- read.csv("Input_data/DVS_weather.csv")
# Load in crop data
crop <- source("Input_data/crop_data.R")
crop <- list(
TSUMEM = 120,
TSUM1 = 1000,
TSUM2 = 950,
Tbase = 0,
DVSI = 0,
DVSEND = 2,
SLA = 0.00212,
RML = 0.030,
RMO = 0.010,
RMR = 0.0150,
RMS = 0.0150,
FLTB = c(0.000, 0.650,
0.100, 0.650,
0.250, 0.700,
0.500, 0.500,
0.646, 0.300,
0.950, 0.000,
2.000, 0.000),
FSTB = c(0.000, 0.350,
0.100, 0.350,
0.250, 0.300,
0.500, 0.500,
0.646, 0.700,
0.950, 1.000,
1.000, 0.000,
2.000, 0.000),
FRTB = c(0.000, 0.500,
0.100, 0.500,
0.200, 0.400,
0.350, 0.220,
0.400, 0.170,
0.500, 0.130,
0.700, 0.070,
0.900, 0.030,
1.200, 0.000,
2.000, 0.000),
FOTB = c(0.000, 0.000,
0.950, 0.000,
1.000, 1.000,
2.000, 1.000),
RGRLAI = 0.0082,
Q10 = 2.0,
Ce = 0.45,
k = 0.6,
CVL = 0.685,
CVO = 0.709,
CVR = 0.694,
CVS = 0.662
)
# Load in crop data
crop <- source("Input_data/crop_data.R")
# Load in crop data
crop <- source("Input_data/crop_data.R")
crop <- list(
TSUMEM = 120,
TSUM1 = 1000,
TSUM2 = 950,
Tbase = 0,
DVSI = 0,
DVSEND = 2,
SLA = 0.00212,
RML = 0.030,
RMO = 0.010,
RMR = 0.0150,
RMS = 0.0150,
FLTB = c(0.000, 0.650,
0.100, 0.650,
0.250, 0.700,
0.500, 0.500,
0.646, 0.300,
0.950, 0.000,
2.000, 0.000),
FSTB = c(0.000, 0.350,
0.100, 0.350,
0.250, 0.300,
0.500, 0.500,
0.646, 0.700,
0.950, 1.000,
1.000, 0.000,
2.000, 0.000),
FRTB = c(0.000, 0.500,
0.100, 0.500,
0.200, 0.400,
0.350, 0.220,
0.400, 0.170,
0.500, 0.130,
0.700, 0.070,
0.900, 0.030,
1.200, 0.000,
2.000, 0.000),
FOTB = c(0.000, 0.000,
0.950, 0.000,
1.000, 1.000,
2.000, 1.000),
RGRLAI = 0.0082,
Q10 = 2.0,
Ce = 0.45,
k = 0.6,
CVL = 0.685,
CVO = 0.709,
CVR = 0.694,
CVS = 0.662
)
# Load in crop data
crop <- source("Input_data/crop_data.R")
# Load in crop data
crop <- source("Input_data/crop_data.R")
crop <- list(
TSUMEM = 120,
TSUM1 = 1000,
TSUM2 = 950,
Tbase = 0,
DVSI = 0,
DVSEND = 2,
SLA = 0.00212,
RML = 0.030,
RMO = 0.010,
RMR = 0.0150,
RMS = 0.0150,
FLTB = c(0.000, 0.650,
0.100, 0.650,
0.250, 0.700,
0.500, 0.500,
0.646, 0.300,
0.950, 0.000,
2.000, 0.000),
FSTB = c(0.000, 0.350,
0.100, 0.350,
0.250, 0.300,
0.500, 0.500,
0.646, 0.700,
0.950, 1.000,
1.000, 0.000,
2.000, 0.000),
FRTB = c(0.000, 0.500,
0.100, 0.500,
0.200, 0.400,
0.350, 0.220,
0.400, 0.170,
0.500, 0.130,
0.700, 0.070,
0.900, 0.030,
1.200, 0.000,
2.000, 0.000),
FOTB = c(0.000, 0.000,
0.950, 0.000,
1.000, 1.000,
2.000, 1.000),
RGRLAI = 0.0082,
Q10 = 2.0,
Ce = 0.45,
k = 0.6,
CVL = 0.685,
CVO = 0.709,
CVR = 0.694,
CVS = 0.662
)
# Initial states ----
initial_leaf_weight <- 0
initial_stem_weight <- 0
initial_root_weight <- 0
initial_storage_weight <- 0
initial_LAI <- 0
state <- c(WLV = initial_leaf_weight,
WST = initial_stem_weight,
WRT = initial_root_weight,
WSO = initial_storage_weight,
LAI = initial_LAI)
# Define the time step
time_step <- 1 # in days
# Define the number of time steps
num_steps <- nrow(weather) # Number of observed days
times <- seq(1, num_steps, by = time_step) # Time vector
# Calculate required variables
# Convert total radiation to PAR
PAR <- 0.5 * weather$Solar  # About 50% of incoming radiation is PAR (Photosynthetically Active Radiation)
# Intercepted PAR using Beer’s Law
fPAR <- 1 - exp(-k * LAI_now)  # k = light extinction coefficient
# Define the number of time steps
num_steps <- nrow(weather) # Number of observed days
# Import the weather data ----
weather <- read.csv("Input_data/DVS_weather.csv")
View(weather)
# Define the number of time steps
num_steps <- nrow(weather) # Number of observed days
times <- seq(1, num_steps, by = time_step) # Time vector
# Define the model ----
crop_growth <- function(t, state, parameters){
with(as.list(c(state, crop)),{
# Get current weather values
day <- floor(t)
Tmean <- weather$Tmean[day]
SR <- weather$Solar[day]
DVS_now <- weather$DVS_stage[day]
LAI_now <- state["LAI"]
# Calculate required variables
# Convert total radiation to PAR
PAR <- 0.5 * SR  # About 50% of incoming radiation is PAR (Photosynthetically Active Radiation)
# Intercepted PAR using Beer’s Law
fPAR <- 1 - exp(-k * LAI_now)  # k = light extinction coefficient
# Simplified calculation of photosynthesis
Rd <- Ce * PAR * fPAR # gross assimilation in kg/ha/day
# Maintenance respiration
RM_25 <- WLV*RML + WST*RMS + WRT*RMR + WSO*RMO
RM <- RM_25 * Q10^((Tmean - 25)/10) # maintenance respiration in kg/ha/day
# Net biomass assimilation
if (RM > Rd) {
RM <- Rd # The maintenance respiration cannot exceed the gross assimilation
}
RN <- Rd - RM # net assimilation in kg/ha/day
# Partitioning (interpolated from tables based on DVS)
FL <- approx(FLTB_df$DVS, FLTB_df$Value, xout = DVS_now, rule = 2)$y
FS <- approx(FSTB_df$DVS, FSTB_df$Value, xout = DVS_now, rule = 2)$y
FR <- approx(FRTB_df$DVS, FRTB_df$Value, xout = DVS_now, rule = 2)$y
FO <- approx(FOTB_df$DVS, FOTB_df$Value, xout = DVS_now, rule = 2)$y
# Biomass growth
dWLV <- RN * FL #* CVL I would use this if I want to calculate carbon content (?)
dWST <- RN * FS #* CVS
dWRT <- RN * FR #* CVR
dWSO <- RN * FO #* CVO
# LAI growth (based on SLA and max relative rate)
dLAI <- min(RGRLAI * LAI_now, SLA * dWLV) # SLA = specific leaf area in ha/kg
return(list(
c(dWLV, dWST, dWRT, dWSO, dLAI),
Rd = Rd,
RN = RN,
DVS = DVS_now
))
})
}
# Run the model ----
out <- ode(y = state, times = times, func = crop_growth, parms = crop)
# Run the model ----
out <- ode(y = state, times = times, func = crop_growth, parms = crop)
Q
# Define the model ----
crop_growth <- function(t, state, parameters){
with(as.list(c(state, crop)),{
# Get current weather values
day <- floor(t)
Tmean <- weather$Tmean[day]
SR <- weather$Solar[day]
DVS_now <- weather$DVS_stage[day]
LAI_now <- state["LAI"]
# Calculate required variables
# Convert total radiation to PAR
PAR <- 0.5 * SR  # About 50% of incoming radiation is PAR (Photosynthetically Active Radiation)
# Intercepted PAR using Beer’s Law
fPAR <- 1 - exp(-k * LAI_now)  # k = light extinction coefficient
# Simplified calculation of photosynthesis
Rd <- Ce * PAR * fPAR # gross assimilation in kg/ha/day
# Maintenance respiration
RM_25 <- WLV*RML + WST*RMS + WRT*RMR + WSO*RMO
RM <- RM_25 * Q10^((Tmean - 25)/10) # maintenance respiration in kg/ha/day
# Net biomass assimilation
if (RM > Rd) {
RM <- Rd # The maintenance respiration cannot exceed the gross assimilation
}
RN <- Rd - RM # net assimilation in kg/ha/day
# Partitioning (interpolated from tables based on DVS)
FL <- approx(FLTB_df$DVS, FLTB_df$Value, xout = DVS_now, rule = 2)$y
FS <- approx(FSTB_df$DVS, FSTB_df$Value, xout = DVS_now, rule = 2)$y
FR <- approx(FRTB_df$DVS, FRTB_df$Value, xout = DVS_now, rule = 2)$y
FO <- approx(FOTB_df$DVS, FOTB_df$Value, xout = DVS_now, rule = 2)$y
# Biomass growth
dWLV <- RN * FL #* CVL I would use this if I want to calculate carbon content (?)
dWST <- RN * FS #* CVS
dWRT <- RN * FR #* CVR
dWSO <- RN * FO #* CVO
# LAI growth (based on SLA and max relative rate)
dLAI <- min(RGRLAI * LAI_now, SLA * dWLV) # SLA = specific leaf area in ha/kg
return(list(
c(dWLV, dWST, dWRT, dWSO, dLAI),
Rd = Rd,
RN = RN,
DVS = DVS_now
))
})
}
debugSource("~/GitHub/Modeling_yield/Scripts/Biomass_production.R", echo=TRUE)
debugSource("~/GitHub/Modeling_yield/Scripts/Biomass_production.R", echo=TRUE)
debugSource("~/GitHub/Modeling_yield/Scripts/Biomass_production.R", echo=TRUE)
# Run the model ----
out <- ode(y = state, times = times, func = crop_growth, parms = crop)
debug(crop_growth)
crop_growth
debug(crop_growth)
# Define the model ----
crop_growth <- function(t, state, parameters){
with(as.list(c(state, crop)),{
# Get current weather values
day <- floor(t)
Tmean <- weather$Tmean[day]
SR <- weather$Solar[day]
DVS_now <- weather$DVS_stage[day]
LAI_now <- state["LAI"]
# Calculate required variables
# Convert total radiation to PAR
PAR <- 0.5 * SR  # About 50% of incoming radiation is PAR (Photosynthetically Active Radiation)
# Intercepted PAR using Beer’s Law
fPAR <- 1 - exp(-k * LAI_now)  # k = light extinction coefficient
# Simplified calculation of photosynthesis
Rd <- Ce * PAR * fPAR # gross assimilation in kg/ha/day
# Maintenance respiration
RM_25 <- WLV*RML + WST*RMS + WRT*RMR + WSO*RMO
RM <- RM_25 * Q10^((Tmean - 25)/10) # maintenance respiration in kg/ha/day
# Net biomass assimilation
if (RM > Rd) {
RM <- Rd # The maintenance respiration cannot exceed the gross assimilation
}
RN <- Rd - RM # net assimilation in kg/ha/day
# Partitioning (interpolated from tables based on DVS)
FL <- approx(FLTB_df$DVS, FLTB_df$Value, xout = DVS_now, rule = 2)$y
FS <- approx(FSTB_df$DVS, FSTB_df$Value, xout = DVS_now, rule = 2)$y
FR <- approx(FRTB_df$DVS, FRTB_df$Value, xout = DVS_now, rule = 2)$y
FO <- approx(FOTB_df$DVS, FOTB_df$Value, xout = DVS_now, rule = 2)$y
# Biomass growth
dWLV <- RN * FL #* CVL I would use this if I want to calculate carbon content (?)
dWST <- RN * FS #* CVS
dWRT <- RN * FR #* CVR
dWSO <- RN * FO #* CVO
# LAI growth (based on SLA and max relative rate)
dLAI <- min(RGRLAI * LAI_now, SLA * dWLV) # SLA = specific leaf area in ha/kg
return(list(
c(dWLV, dWST, dWRT, dWSO, dLAI),
Rd = Rd,
RN = RN,
DVS = DVS_now
))
})
}
debugSource("~/GitHub/Modeling_yield/Scripts/Biomass_production.R", echo=TRUE)
debugSource("~/GitHub/Modeling_yield/Scripts/Biomass_production.R", echo=TRUE)
debugSource("~/GitHub/Modeling_yield/Scripts/Biomass_production.R", echo=TRUE)
-----------------------------------------------------------
# Written by Alena Pavlackova
# ETH Biogeochemical modeling group project
# The script calculates the biomass production from photosynthesis
-----------------------------------------------------------
# Required libraries ----
library(deSolve)
library(ggplot2)
